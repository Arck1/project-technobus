'use strict';

//Константы и глобальные переменные
//
var days = ['monday', 'tuesday', 'tednesday', 'thursday', 'friday', 'saturday', 'sunday'];
var fullDays = ['fullMonday', 'fullTuesday', 'fullTednesday', 'fullThursday', 'fullFriday', 'fullSaturday', 'fullSunday'];
var inWeekDays = ['Воскресенье', 'Понедельник', 'Вторник', 'Среду', 'Четверг', 'Пятницу', 'Субботу'];

var currentTableId = 0;
var currentWindow = 1;
var googleSpreadsheet;
var tableViewer;
var apiObj;
var infoList = [];
var sortedTimeLists = { 'to': [], 'from': [] };
var notificationNumber = 0;

//Параметр для включения геолокации
var isGeoLocationOn = true;

var key = "AIzaSyAl9aZAZCbOAYhUl0RH57S9cnAPMnG3LLs";
var spreadsheetId = "10db0NtOmOC5TLw0WBuzFCGtoVa1GaFYDeUqIADh6p1E";

//Параметры для запросов
var ToTecnopolis = "To Technopolis";
var rangeTo = "A:H";

var FromTechnopolis = "From Technopolis";
var rangeFrom = "A:H";

var Info = "Info";
var InfoRange = "A:B";
/**
 * Установка языка сайта
 * @param {string} lang Пользовательская локаль
 */
// function setLanguage(lang) {
// 	$.getJSON(`lang/${lang}.json`, function (data) {
// 		$.each(data, function (key, val) {
// 			$(`[name = ${key}]`).html(val);
// 		});
// });}

// UpUp.start({
//   'content-url': 'index.html',
//   'assets': ['/img/technopolis.jpg', '/css/main.min.css', '/lang/en.json', '/lang/ru.json','/js/scripts.min.js'],
//   'service-worker-url': '/upup.sw.min.js'
// });
"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Модуль работы с гугл таблицами
 */

$(function googleApi() {
    var GoogleSpreadsheet = function () {
        function GoogleSpreadsheet(key, spreadsheetId) {
            _classCallCheck(this, GoogleSpreadsheet);

            this.key = key;
            this.spreadsheetId = spreadsheetId;
        }

        _createClass(GoogleSpreadsheet, [{
            key: "load",
            value: function load(sheet, range, fun) {
                var googleUrl = "https://sheets.googleapis.com/v4/spreadsheets/" + spreadsheetId + "/values/" + sheet + "!" + range + "?key=" + key;
                console.log("get:", googleUrl);
                $.getJSON(googleUrl, fun);
            }
        }]);

        return GoogleSpreadsheet;
    }();

    var API = function () {
        function API(tableViewer, googleSpreadsheet) {
            _classCallCheck(this, API);

            this.tableViewer = tableViewer;
            this.googleSpreadsheet = googleSpreadsheet;
            if (localStorage.length === 0 || localStorage.getItem(0) == null || localStorage.getItem(1) == null) {
                //не трогать!
                $.ajaxSetup({
                    async: false
                });
                this.saveToLocalStorage();
                $.ajaxSetup({
                    async: true
                });
                while (localStorage.length === 0 || localStorage.getItem(0) == null || localStorage.getItem(1) == null || localStorage.getItem('info') == null) {}
                console.log("first saveToLocalStorage()");
            } else {

                if (navigator.onLine) {
                    this.saveToLocalStorage();
                    console.log("onLine updateStorage()");
                    this.updateStorage();
                    //this.showTimetable(0);
                }
                console.log("first showTimetable()");
                try {
                    this.showTimetable(0);
                } catch (err) {
                    console.error("showTimetable: ", err);
                }
            }
        }

        /**
         * Запрашивает с апи гугла таблицу по урлу
         * @param sheet
         * @param range
         * @param {function} fun Что с ней делает
         */


        _createClass(API, [{
            key: "googleSpreadsheetLoad",
            value: function googleSpreadsheetLoad(sheet, range, fun) {
                this.googleSpreadsheet.load(sheet, range, function (result) {
                    console.log("\u0417\u0430\u0433\u0440\u0443\u0436\u0435\u043D \u043E\u0431\u044C\u0435\u043A\u0442:", result);
                    fun(result);
                });
            }

            /**
             * Сохранение расписания в локальное хранилище
             */

        }, {
            key: "saveToLocalStorage",
            value: function saveToLocalStorage() {
                var _this = this;

                this.googleSpreadsheetLoad(ToTecnopolis, rangeTo, function (result) {
                    //console.log(result);
                    localStorage.setItem(0, JSON.stringify(result));
                    //this.tableViewer.addTableList(result, 0);
                });
                this.googleSpreadsheetLoad(FromTechnopolis, rangeFrom, function (result) {
                    localStorage.setItem(1, JSON.stringify(result));
                    //this.tableViewer.addTableList(result, 1);
                });
                this.googleSpreadsheetLoad(Info, InfoRange, function (result) {
                    _this.tableViewer.addInfoList(result);
                    localStorage.setItem('info', JSON.stringify(result));
                });
                this.showTimetable(currentTableId);
                localStorage.setItem('DATE', Date());
            }

            /**
             * Обновление
             */

        }, {
            key: "updateStorage",
            value: function updateStorage() {
                this.tableViewer.cleanTableList();
                this.saveToLocalStorage();
            }
        }, {
            key: "showTimetable",
            value: function showTimetable(id) {
                var now = new Date();
                // now.setDate("17/02/2018");
                // console.log(now);
                if (now.getDay() > 0 && now.getDay() < 6) {
                    this.tableViewer.addTableList(JSON.parse(localStorage.getItem(0)), 0);
                    this.tableViewer.addTableList(JSON.parse(localStorage.getItem(1)), 1);
                    //this.tableViewer.addTableList(JSON.parse(localStorage.getItem(id)), id);
                } else {
                    var infoLi = "<li class=\"next anotherVariants\">\n                                                <div class=\"time\"></div>\n                                                <div class=\"time-info\">\n                                                    <div class=\"info\">\u0412 \u0432\u044B\u0445\u043E\u0434\u043D\u044B\u0435 \u0430\u0432\u0442\u043E\u0431\u0443\u0441\u043E\u0432 \u043D\u0435\u0442</div>\n                                                    <div class=\"desc\">\u0412\u043E\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0439\u0442\u0435\u0441\u044C \u043E\u0431\u0449\u0435\u0441\u0442\u0432\u0435\u043D\u043D\u044B\u043C \u0442\u0440\u0430\u043D\u0441\u043F\u043E\u0440\u0442\u043E\u043C &#10095;</div>\n                                                </div>\n                                                 </li>";
                    $(".copyright").css("bottom", "50px");
                    $("#scheduleList0").html(infoLi);
                    $("#scheduleList1").html(infoLi);
                }
            }
        }]);

        return API;
    }();

    var TableViewer = function () {
        function TableViewer(timetableRowClass, infoClass) {
            _classCallCheck(this, TableViewer);

            this.timetableRowClass = timetableRowClass;
            this.infoClass = infoClass;
        }

        /**
         * Добавляет информанию из таблицы
         * @param {object}   infoJSON  Обьект
         * @param {string} infoClass Класс в который добавляем
         */


        _createClass(TableViewer, [{
            key: "addInfoList",
            value: function addInfoList(infoJSON) {
                var notifications = infoJSON.values;
                notifications.shift();
                infoList = notifications;
            }

            /**
             * Add table list in timetable
             * @param   {object} timetableJSON     Data
             * @param   {string} timetableRowClass Table DOM class
             * @param   {number} id                Table list number
             */

        }, {
            key: "addTableList",
            value: function addTableList(timetableJSON, id) {
                console.log("f: addTableList(id=" + id + ", timetableJSON=", timetableJSON, ", timetableRowClass= " + this.timetableRowClass + ")");
                var timetableRowHtmlString = "";
                console.log(JSON.stringify(timetableJSON.values));
                var timetable = timetableJSON.values;
                var timeSort = {};
                timetable.shift();
                test_time = timetable[0][0];
                timetable.forEach(function (mins, i) {
                    var _mins$0$split = mins[0].split(':'),
                        _mins$0$split2 = _slicedToArray(_mins$0$split, 2),
                        hour = _mins$0$split2[0],
                        min = _mins$0$split2[1];

                    mins.shift();
                    if (timeSort[hour] === undefined) timeSort[hour] = [];
                    timeSort[hour].push({ min: min, mins: mins });
                });

                function compareHour(a, b) {
                    if (a.hour > b.hour) return 1;
                    if (a.hour < b.hour) return -1;
                }

                function compareMin(a, b) {
                    if (a.min > b.min) return 1;
                    if (a.min < b.min) return -1;
                }

                //timeSort = timeSort.sort(compareHour);
                for (var i = 0; i < timeSort.length; i++) {
                    timeSort[i] = timeSort[i].sort(compareMin);
                }
                if (id === 0) sortedTimeLists.to = timeSort;else sortedTimeLists.from = timeSort;
                console.log(sortedTimeLists);
                //console.log(JSON.stringify(timeSort));

                for (hour in timeSort) {
                    for (index in timeSort[hour]) {
                        if (hour !== "" && timeSort[hour][index].min !== "") {
                            var weekCount = 0;
                            var weekSelect = timeSort[hour][index].mins;
                            for (var _i = 0; _i < weekSelect.length; _i++) {
                                if (weekSelect[_i].length > 0) weekCount++;
                            }
                            var shadowClass = "";
                            var specialInfo = "";
                            if (weekCount < 5) {
                                var now = new Date();
                                var weekDayNumber = now.getDay();

                                var itIsSuperLongIteratorButInVeryUseful = weekDayNumber - 1;
                                if (weekSelect[itIsSuperLongIteratorButInVeryUseful].length === 0) {
                                    shadowClass = "shadow";
                                    specialInfo = "В ";
                                    for (var _i2 = 0; _i2 < weekSelect.length; _i2++) {
                                        if (weekSelect[_i2].length > 0) {
                                            specialInfo += inWeekDays[(_i2 + 1) % 7] + " ";
                                        }
                                    }
                                } else {
                                    shadowClass = 'redline';
                                    specialInfo = "Только сегодня";
                                }
                            }
                            timetableRowHtmlString += "<li class=\"" + shadowClass + " \">\n                                                <div class=\"time\">" + hour + ":" + timeSort[hour][index].min + "</div>\n                                                <div class=\"time-info\">\n                                                    <div class=\"info\"></div>\n                                                    <div class=\"desc\">" + specialInfo + "</div>\n                                                </div>\n                                                 </li>";
                        }
                    }
                }

                /**
                 * Добавляет строку минут в таблицу
                 * @param hour
                 * @param   {object} mins Массив пар (Минуты:День,Id:Часы)
                 * @returns {string} Строковое представление в таблице
                 */
                function getMinsHtmlString(hour, mins) {
                    var minsHtmlString = hour + ':' + mins[0].value;
                    // mins.forEach(function (min, i) {
                    //     minsHtmlString += `<div  class="timetable__min ${getDayClassName(min.mins)}">
                    // 				${hour}:${min.min}
                    // 			</div>`;
                    // });
                    return minsHtmlString;

                    /**
                     * Добавляет класс дня недели
                     * @param   {string} tableDayName Название дня недели в таблице exel
                     * @returns {string}   Класс дня недели
                     */
                    function getDayClassName(tableDayName) {
                        //console.log(tableDayName);
                        var minDaysClassNames = "";
                        // let daysExtendtion = [...days, "All"];
                        // let count = 0;
                        // for (let i = 0; i < tableDayName.length; i++) {
                        //     if (tableDayName[i] === "") {
                        //         count++;
                        //         continue;
                        //     }
                        //     minDaysClassNames += ' day-' + daysExtendtion[i];
                        // }
                        // if (count === 0) minDaysClassNames += ' day-All';
                        return minDaysClassNames;
                    }
                }
                var idTag = this.timetableRowClass + id;
                $(idTag).html(timetableRowHtmlString);
            }
        }, {
            key: "cleanTableList",
            value: function cleanTableList() {
                $(this.timetableRowClass + currentTableId).html("");
            }
        }]);

        return TableViewer;
    }();

    googleSpreadsheet = new GoogleSpreadsheet(key, spreadsheetId);
    tableViewer = new TableViewer("#scheduleList", ".info-list");
    apiObj = new API(tableViewer, googleSpreadsheet);

    //setLanguage("ru");
});
"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

/**
 * Модуль работы с датой
 */

$(function () {
    /**
     * Установка текущей даты, поиск следующей даты в таблице, выделение ближайшего рейса, добавление перерыва,
     * отсчёт времени
     */
    function getDiffTime(hour, minuts) {
        var res = "";
        if (hour < 10) res = "0" + hour;else res = hour;
        if (minuts < 10) {
            res += ":0" + minuts;
        } else {
            res += ":" + minuts;
        }
        return res;
    }

    function setDate() {

        apiObj.showTimetable(0);
        $(".break").remove();
        // $(".ftwo").hide();
        // $(".fone").hide();

        var listTo = $("#scheduleList0").get(0).children;
        var listFrom = $("#scheduleList1").get(0).children;

        var selected_item = listTo[0];
        var index = 0;
        var minDiffFromTime = 90000;
        var time = new Date();
        // time.setDate("17/02/2018");
        // time.setHours(22);
        // time.setMinutes(50);

        if (time.getDay() > 0 && time.getDay() < 6) {
            var lastLi = listTo[listTo.length - 1];
            $(lastLi).addClass("warning");

            //lastLi.children[1].children[1].innerHTML = "Всегда есть другие варианты &#10095;";

            lastLi = listFrom[listFrom.length - 1];
            $(lastLi).addClass("warning");
            //lastLi.children[1].children[1].innerHTML = "Всегда есть другие варианты &#10095;";
        }

        var timeInMins = time.getHours() * 60 + time.getMinutes();

        //Поиск и выделение элемента в таблице к технополису
        for (var i = 0; i < listTo.length; i++) {
            var li = listTo[i];
            var _divTime = li.children[0];
            var _divInfo = li.children[1];

            var _divTime$innerText$sp = _divTime.innerText.split(':'),
                _divTime$innerText$sp2 = _slicedToArray(_divTime$innerText$sp, 2),
                _h = _divTime$innerText$sp2[0],
                _m = _divTime$innerText$sp2[1];

            var hm = parseInt(_h) * 60 + parseInt(_m);

            if (hm > timeInMins && minDiffFromTime > Math.abs(timeInMins - hm) && !$(li).hasClass('shadow')) {
                selected_item = li;
                index = i;
                minDiffFromTime = Math.abs(timeInMins - hm);
                // console.log(minDiffFromTime);
            }
        }

        if (minDiffFromTime === 90000) {

            // let divTime = listTo[0].children[0];
            // let divInfo = listTo[0].children[1];
            //
            // let [h, m] = divTime.innerText.split(':');
            //
            // let hm = parseInt(h) * 60 + parseInt(m);
            //
            // minDiffFromTime = hm + 1440 - timeInMins;


            $('#scheduleList0 li.warning').after("<li class=\"break fone next\"><div class=\"time-info\">" + "<div class=\"info\">Рейсы закончились</div>" + "<div class=\"desc\">Воспользуйтесь общественным транспортом &#10095</div></div></li>");
        }
        var divTime = selected_item.children[0];
        var divInfo = selected_item.children[1];

        var _divTime$innerText$sp3 = divTime.innerText.split(':'),
            _divTime$innerText$sp4 = _slicedToArray(_divTime$innerText$sp3, 2),
            h = _divTime$innerText$sp4[0],
            m = _divTime$innerText$sp4[1];

        // $(".success").removeClass();
        // $(".alert").removeClass();
        // $(".next").removeClass();


        $("ul #scheduleList0 li .next").removeClass("success");
        $("ul #scheduleList0 li .next").removeClass("alert");
        $("ul #scheduleList0 li .next").removeClass("next");

        var hourDiff = Math.floor(minDiffFromTime / 60);
        var minutsDiff = minDiffFromTime % 60;

        if (minDiffFromTime > 5 && minDiffFromTime <= 10) {
            //selected_item.className = "success";
            $(selected_item).addClass("success");
            divInfo.children[0].innerText = 'Через ' + getDiffTime(hourDiff, minutsDiff);
        } else {
            if (minDiffFromTime <= 5) {
                //selected_item.className = "alert";
                $(selected_item).addClass("alert");
                divInfo.children[0].innerText = 'Через ' + getDiffTime(hourDiff, minutsDiff);
            }
        }
        if (minDiffFromTime < 90000) {
            $(selected_item).addClass("next");
        }

        if (index < listTo.length - 1 && ($(selected_item).hasClass('success') || $(selected_item).hasClass('alert'))) {
            var nextIndex = index + 1;
            while (nextIndex < listTo.length && $(listTo[nextIndex]).hasClass('shadow')) {
                nextIndex++;
            }if (nextIndex < listTo.length) {
                var nextTime = listTo[nextIndex].children[0];

                var _nextTime$innerText$s = nextTime.innerText.split(':'),
                    _nextTime$innerText$s2 = _slicedToArray(_nextTime$innerText$s, 2),
                    _h2 = _nextTime$innerText$s2[0],
                    _m2 = _nextTime$innerText$s2[1];

                var nextTimeInMinutes = parseInt(_h2) * 60 + parseInt(_m2);
                var difMins = nextTimeInMinutes - timeInMins;
                while (difMins < 0) {
                    difMins += 24 * 60;
                }
                var _hourDiff = Math.floor(difMins / 60);
                var _minutsDiff = difMins % 60;

                divInfo.children[1].innerText = "Следующий за ним - через " + getDiffTime(_hourDiff, _minutsDiff);
            }
        }

        if ($(selected_item).hasClass('warning')) {
            divInfo.children[1].innerHTML = "Всегда есть другие варианты &#10095;";
            $(selected_item).addClass("anotherVariants");
        }

        if (index > 0) {
            var _listTo$children$0$in = listTo[index - 1].children[0].innerText.split(':');

            var _listTo$children$0$in2 = _slicedToArray(_listTo$children$0$in, 2);

            hv1 = _listTo$children$0$in2[0];
            mi1 = _listTo$children$0$in2[1];

            a = $(listTo[index]).hasClass('shadow');
            if (a) {
                var _listTo$children$0$in3 = listTo[index + 1].children[0].innerText.split(':');

                var _listTo$children$0$in4 = _slicedToArray(_listTo$children$0$in3, 2);

                hv2 = _listTo$children$0$in4[0];
                mi2 = _listTo$children$0$in4[1];
            } else {
                var _listTo$index$childre = listTo[index].children[0].innerText.split(':');

                var _listTo$index$childre2 = _slicedToArray(_listTo$index$childre, 2);

                hv2 = _listTo$index$childre2[0];
                mi2 = _listTo$index$childre2[1];
            }
            pereriv = mi2 - mi1 + hv2 * 60 - hv1 * 60;
        } else {
            pereriv = 200;
        }

        if (pereriv >= 40 && pereriv < 200) {
            $(selected_item).before("<li class=\"break fone\"><div class=\"time-info\">" + "<div class=\"info\">Перерыв " + minDiffFromTime + " минут</div>" + "<div class=\"desc\">Воспользуйтесь общественным транспортом &#10095</div></div></li>");

            if (currentTableId === 0) $(".fone").show();
        } else {
            $(".break fone").remove();

            if (minDiffFromTime > 10 && minDiffFromTime < 40) {
                divInfo.children[0].innerText = 'Через ' + getDiffTime(hourDiff, minutsDiff);
                divInfo.children[1].innerHTML = "Всегда есть другие варианты &#10095;";
                $(selected_item).addClass("anotherVariants");
            }
        }

        //Поиск и выделение элемента в таблице к метро

        minDiffFromTime = 90000;
        index = 0;
        selected_item = listFrom[0];
        for (var _i = 0; _i < listFrom.length; _i++) {
            var _li = listFrom[_i];
            var _divTime2 = _li.children[0];
            var _divInfo2 = _li.children[1];

            var _divTime2$innerText$s = _divTime2.innerText.split(':'),
                _divTime2$innerText$s2 = _slicedToArray(_divTime2$innerText$s, 2),
                _h3 = _divTime2$innerText$s2[0],
                _m3 = _divTime2$innerText$s2[1];

            var _hm = parseInt(_h3) * 60 + parseInt(_m3);

            if (_hm > timeInMins && minDiffFromTime > Math.abs(_hm - timeInMins) && !$(_li).hasClass('shadow')) {
                selected_item = _li;
                index = _i;
                minDiffFromTime = Math.abs(timeInMins - _hm);
                // console.log(minDiffFromTime);
            }
        }
        if (minDiffFromTime === 90000) {
            // let divTime = listFrom[0].children[0];
            // let divInfo = listFrom[0].children[1];
            //
            // let [h, m] = divTime.innerText.split(':');
            //
            // let hm = parseInt(h) * 60 + parseInt(m);
            //
            // minDiffFromTime = hm + 1440 - timeInMins;

            $('#scheduleList1 li.warning').after("<li class=\"break fone\"><div class=\"time-info\">" + "<div class=\"info\">Рейсы закончились</div>" + "<div class=\"desc\">Воспользуйтесь общественным транспортом &#10095</div></div></li>");
        }
        divTime = selected_item.children[0];
        divInfo = selected_item.children[1];

        $("ul #scheduleList1 li .next").removeClass("success");
        $("ul #scheduleList1 li .next").removeClass("alert");
        $("ul #scheduleList1 li .next").removeClass("next");
        //$("ul #scheduleList1 li .alert").removeClass();

        hourDiff = Math.floor(minDiffFromTime / 60);
        minutsDiff = minDiffFromTime % 60;

        if (minDiffFromTime > 5 && minDiffFromTime <= 10) {
            $(selected_item).addClass("success");
            //selected_item.className = "success";

            divInfo.children[0].innerText = 'Через ' + getDiffTime(hourDiff, minutsDiff);
        } else {
            if (minDiffFromTime <= 5) {
                $(selected_item).addClass("alert");
                //selected_item.className = "alert";
                divInfo.children[0].innerText = 'Через ' + getDiffTime(hourDiff, minutsDiff);
            }
        }
        if (minDiffFromTime < 90000) {
            $(selected_item).addClass("next");
        }

        if (index < listFrom.length - 1 && ($(selected_item).hasClass('success') || $(selected_item).hasClass('alert'))) {
            var _nextIndex = index + 1;
            var teta = !$(listFrom[_nextIndex]).hasClass('shadow');
            while (_nextIndex < listFrom.length && $(listFrom[_nextIndex]).hasClass('shadow')) {
                _nextIndex++;
            }if (_nextIndex < listFrom.length) {
                var _nextTime = listFrom[_nextIndex].children[0];

                var _nextTime$innerText$s3 = _nextTime.innerText.split(':'),
                    _nextTime$innerText$s4 = _slicedToArray(_nextTime$innerText$s3, 2),
                    _h4 = _nextTime$innerText$s4[0],
                    _m4 = _nextTime$innerText$s4[1];

                var _nextTimeInMinutes = parseInt(_h4) * 60 + parseInt(_m4);
                var _difMins = _nextTimeInMinutes - timeInMins;
                while (_difMins < 0) {
                    _difMins += 24 * 60;
                }
                var _hourDiff2 = Math.floor(_difMins / 60);
                var _minutsDiff2 = _difMins % 60;

                divInfo.children[1].innerText = "Следующий за ним - через " + getDiffTime(_hourDiff2, _minutsDiff2);
            }
        }
        if ($(selected_item).hasClass('warning')) {
            divInfo.children[1].innerHTML = "Всегда есть другие варианты &#10095;";
            $(selected_item).addClass("anotherVariants");
        }

        if (index > 0) {
            var _listFrom$children$0$ = listFrom[index - 1].children[0].innerText.split(':');

            var _listFrom$children$0$2 = _slicedToArray(_listFrom$children$0$, 2);

            hv1 = _listFrom$children$0$2[0];
            mi1 = _listFrom$children$0$2[1];

            a = $(listFrom[index]).hasClass('shadow');
            if (a) {
                var _listFrom$children$0$3 = listFrom[index + 1].children[0].innerText.split(':');

                var _listFrom$children$0$4 = _slicedToArray(_listFrom$children$0$3, 2);

                hv2 = _listFrom$children$0$4[0];
                mi2 = _listFrom$children$0$4[1];
            } else {
                var _listFrom$index$child = listFrom[index].children[0].innerText.split(':');

                var _listFrom$index$child2 = _slicedToArray(_listFrom$index$child, 2);

                hv2 = _listFrom$index$child2[0];
                mi2 = _listFrom$index$child2[1];
            }

            pereriv = mi2 - mi1 + hv2 * 60 - hv1 * 60;
        } else {
            pereriv = 200;
        }

        if (pereriv >= 40 && pereriv < 200) {
            $(selected_item).before("<li class=\"break ftwo\"><div class=\"time-info\">" + "<div class=\"info\">Перерыв " + minDiffFromTime + " минут</div>" + "<div class=\"desc\">Воспользуйтесь общественным транспортом &#10095</div></div></li>");

            if (currentTableId === 1) {
                $(".ftwo").show();
            }
        } else {
            $(".break ftwo").remove();
            if (minDiffFromTime > 10 && minDiffFromTime < 40) {
                divInfo.children[0].innerText = 'Через ' + getDiffTime(hourDiff, minutsDiff);
                divInfo.children[1].innerHTML = "Всегда есть другие варианты &#10095;";
                $(selected_item).addClass("anotherVariants");
            }
        }

        $('li.break').click(function () {
            $('#Third_page').trigger('click');
        });
        $('li.anotherVariants').click(function () {
            $('#Third_page').trigger('click');
        });
    }

    setDate();
    setInterval(setDate, 30000);
});
"use strict";

function checkGeoLocation() {
    if (isGeoLocationOn && navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function (position) {
            var x = position.coords.latitude;
            var y = position.coords.longitude;
            //59.818101, 30.327032 ROI
            //59.854597, 30.320867 Metro
            var x1 = 59.818101; //ROI
            var y1 = 30.327032; //ROI
            var x2 = 59.854597; //Metro
            var y2 = 30.320867; //Metro

            var distanceToRoi = Math.sqrt(Math.pow(Math.abs(x1 - x), 2) + Math.pow(Math.abs(y1 - y), 2));
            var distanceToMetro = Math.sqrt(Math.pow(Math.abs(x2 - x), 2) + Math.pow(Math.abs(y2 - y), 2));

            if (distanceToRoi <= distanceToMetro) {
                currentTableId = 1;
                $("#toMetro").addClass("is-active");
                $("#toTechn").removeClass("is-active");
                $("#timelineDirection").addClass("tube");
                $("#scheduleList0").hide();
                $("#scheduleList1").show();
            } else {
                currentTableId = 0;
                $("#toTechn").addClass("is-active");
                $("#toMetro").removeClass("is-active");
                $("#timelineDirection").removeClass("tube");
                $("#scheduleList1").show();
                $("#scheduleList0").hide();
            }
            if (currentTableId === 0) {
                $('#timelineDirection').animate({ scrollTop: $("#scheduleList0 li.next").offset().top - $("#scheduleList0").offset().top - 60 });
            } else {
                $('#timelineDirection').animate({ scrollTop: $("#scheduleList1 li.next").offset().top - $("#scheduleList1").offset().top - 60 });
            }
        });
    } else {
        currentTableId = 0;
        $("#toTechn").addClass("is-active");
        $("#toMetro").removeClass("is-active");
        $("#timelineDirection").removeClass("tube");
        $("#scheduleList1").show();
        $("#scheduleList0").hide();
        $('#timelineDirection').animate({ scrollTop: $("#scheduleList0 li.next").offset().top - $("#scheduleList0").offset().top - 60 });
    }
}
"use strict";

/**
 * Первичная инициализация
 */
$(function () {

    //проверка геопозиции
    checkGeoLocation();

    //showMap();
    //первичное отображение таблицы, в зависимости от заданной стартовой
    if (currentTableId === 0) {
        $("#scheduleList1").hide();
    } else {
        $("#scheduleList0").hide();
    }

    // let listTo = $("#scheduleList0").get(0).children;
    // let listFrom = $("#scheduleList1").get(0).children;
    //
    // let lastLi = listTo[listTo.length - 1];
    // lastLi.className = "warning";
    //
    // console.log(lastLi);
    // lastLi.children[1].children[1].innerText = "Всегда есть другие варианты";
    //
    // lastLi = listFrom[listFrom.length - 1];
    // lastLi.className = "warning";
    // lastLi.children[1].children[1].innerText = "Всегда есть другие варианты";


    if (currentTableId === 0) {
        $('#timelineDirection').animate({ scrollTop: $("#scheduleList0 li.next").offset().top - $("#scheduleList0").offset().top - 60 });
    } else {
        $('#timelineDirection').animate({ scrollTop: $("#scheduleList1 li.next").offset().top - $("#scheduleList1").offset().top - 60 });
    }
});
'use strict';

/**
 * Модуль карты
 * @param {object} function ( Инициализация карты
 */
$(function () {
  /**
   * Инициализация карты
   */
  function init() {
    var places = {
      metro: [59.853876, 30.321102],
      technopolis: [59.818043, 30.327938],
      metro1: [59.850127, 30.321772],
      routeCenter: [59.835681, 30.322253]
    };
    var from = places.metro,
        to = places.technopolis;
    var myMap = new ymaps.Map('map', {
      center: places.metro,
      zoom: 16
    }, {
      searchControlProvider: 'yandex#search'

    }),
        myPlacemark = new ymaps.Placemark(myMap.getCenter());

    myMap.geoObjects.add(myPlacemark);
    var myRoute = void 0;

    function addRoute(from, to) {
      ymaps.route([{
        point: from,
        type: 'viaPoint'
      }, to]).then(function (route) {
        myMap.geoObjects.add(myRoute = route);
      }, function (error) {
        console.error('Возникла ошибка: ' + error.message);
      });
    }
    var routeButton = new ymaps.control.Button('<i class="fa fa-bus" style="color: dimgray"></i>');

    routeButton.events.add('select', function () {
      addRoute(from, to);
      myMap.setZoom(12);
      myMap.setCenter(places.routeCenter);
    }).add('deselect', function () {
      myRoute && myMap.geoObjects.remove(myRoute);
    });

    myMap.controls.add(routeButton, { float: 'left', maxWidth: 'auto' });

    myPlacemark.events.add('mouseenter', function (e) {
      // Ссылку на объект, вызвавший событие,
      // можно получить из поля 'target'.
      e.get('target').options.set('preset', 'islands#greenIcon');
    }).add('mouseleave', function (e) {
      e.get('target').options.unset('preset');
    });

    function changeRoute() {
      if (routeButton.isSelected()) {
        myRoute && myMap.geoObjects.remove(myRoute);
        addRoute(from, to);
      }
    }

    // $(".from_technopolis").click(function () {
    // 	myMap.setCenter(places.technopolis);
    //    myPlacemark.geometry.setCoordinates(myMap.getCenter());
    //    from = places.technopolis;
    //    to= places.metro1;
    //    changeRoute();
    //    myMap.setZoom(16);
    // });
    //
    // $(".to_technopolis").click(function () {
    // 	myMap.setCenter(places.metro);
    // 	myPlacemark.geometry.setCoordinates(myMap.getCenter());
    //    from=places.metro;
    //    to=places.technopolis;
    //    changeRoute();
    //    myMap.setZoom(16);
    // });

  }

  //ymaps.ready(init);
});
'use strict';

/**
 * Управление уведомлением
 */
$(function () {
    /**
     * Скрытие уведомления
     */
    function hideNotification() {
        $('#notification').hide();
    }

    $('#notification').click(function () {
        hideNotification();
    });

    /**
     * Отображение уведомления из infoList
     */
    function getNotification() {

        if (infoList.length === 0) {
            infoList = JSON.parse(localStorage.getItem('info')).values;
        }
        var notification = infoList[notificationNumber];
        if (notification[0].length > 0 && notification[1].length > 0) {
            $("#title_notification").text(notification[0]);
            $("#output_notification").text(notification[1]);
            $('#notification').show();
        }
    }

    getNotification();
});
/**
 * Модуль отрисовка боковой панели 
 */
// $(function(){
// 	(function(){
// 		let strDOM = "";
// 		days.forEach(function (day, i) {
// 			strDOM+= `<div class="panel--button panel--button-${i} day-${day}">
// 						<span name="${day}"></span>
// 					</div>`;
// 		});
// 		$(".panel").append(strDOM);
//
// 		days.forEach(function (day) {
// 			$(`.panel--button.day-${day}`).click(function () {
// 				console.log(day, " clicked");
// 				days.forEach(function (dayin) {
// 					$(`.timetable__min.day-${dayin}`).removeClass("spy");
// 					console.log(dayin, " removeClass")
// 				});
// 				$(`.timetable__min.day-${day}`).addClass("spy");
// 				console.log(day, " addClass");
// 				setTimeout(function(){
// 					days.forEach(function (dayin) {
// 					$(`.timetable__min.day-${dayin}`).removeClass("spy");
// 					console.log(dayin, " removeClass")
// 				});
// 				},3000);
//
// 			});
// 		});
// 	})();
//
// });
"use strict";
"use strict";

/**
 * Модуль установки времени показа заставки
 */
$(function () {
  // Установка времени показа заставки
  $(".preloader").delay(1000).fadeOut("slow");
});
//
// $(".xls").click(function(){
//     location.href = "https://docs.google.com/spreadsheet/pub?key=1Xdje643qsnGXaOjU70larjh-UFTh6Bt9ii83a7t68Oo&output=xls";
// })
//
// $(".pdf").click(function(){
//     location.href = "https://docs.google.com/spreadsheet/pub?key=1Xdje643qsnGXaOjU70larjh-UFTh6Bt9ii83a7t68Oo&output=pdf";
// })
"use strict";
'use strict';

/**
 * Модуль установки событий работы с свичём
 */
// $(function () {
//     $(".russian").button('toggle');
//     $(".russian").click(function () {
//         setLanguage("ru");
//         $('#map').attr('lang','ru');
//     });
//  $(".russian").click();
//     $(".english").click(function () {
//         setLanguage("en");
//         $('#map').attr('lang','en');
//     });
//  $(".lang").addClass("btn-group-vertical");
//  $(".lang").removeClass("btn-group");
//     $(".to_technopolis").button('toggle');
//  $(".to_technopolis").click(function () {
//          $("#route0").css("visibility", "visible");
//          $("#route0").css("position", "initial");
//          $("#route1").css("visibility", "hidden");
//          $("#route1").css("position", "absolute");
//     });
//  $(".from_technopolis").click(function () {
//         $("#route0").css("visibility", "hidden");
//          $("#route0").css("position", "absolute");
//          $("#route1").css("visibility", "visible");
//          $("#route1").css("position", "initial");
//     });
// });

function showMap() {
    if (currentTableId === 0) {
        $('#map0').html('<script type="text/javascript" charset="utf-8" async src="https://api-maps.yandex.ru/services/constructor/1.0/js/?um=constructor%3A7757fad0712b0a44ffbabf020dc68752cea4c3c876db47744728c731e6c3051c&amp;width=' + $('#map0').width() + '&amp;height=400&amp;lang=ru_RU&amp;scroll=true"></script>');
    } else {
        $('#map1').html('<script type="text/javascript" charset="utf-8" async src="https://api-maps.yandex.ru/services/constructor/1.0/js/?um=constructor%3Afcd18ec223d5d71ebccdb36407f7f14715e6a207a5455b0d3bfad2ed86a2f2b1&amp;width=' + $('#map1').width() + '&amp;height=400&amp;lang=ru_RU&amp;scroll=true"></script>');
    }
}

$(window).resize(function () {
    if (currentWindow === 2) {
        showMap();
    }
});

$(function () {

    $('#First_page').click(function () {
        currentWindow = 1;
        if (currentTableId == 0) {
            $('#toTechn').trigger('click');
        } else if (currentTableId == 1) {
            $('#toMetro').trigger('click');
        }
    });

    $('#Second_page').click(function () {
        currentWindow = 2;
        showMap();
    });

    $('#Third_page').click(function () {
        currentWindow = 3;
    });

    $("#toTechn").click(function () {
        currentTableId = 0;

        $("#toTechn").addClass("is-active");
        $("#toMetro").removeClass("is-active");
        $("#timelineDirection").removeClass("tube");

        if (currentWindow == 1) {
            transition1();

            $("#scheduleList1").hide();
            $("#scheduleList0").show();

            var sl = document.querySelector("#scheduleList0 .succes");
            if (!sl) {
                sl = document.querySelector("#scheduleList0 .alert");
                sl = document.querySelector("#scheduleList0 .next");
            }

            $('#timelineDirection').animate({ scrollTop: $("#scheduleList0 li.next").offset().top - $("#scheduleList0").offset().top - 60 });
        } else if (currentWindow == 2) {
            transition2();
            showMap();
        } else if (currentWindow == 3) transition3();

        // let b = $("#scheduleList0 .success");
        // if(b.length == 0){
        //     b = $("#scheduleList0 .alert");
        // }
        // if(b.length == 0){
        //     b = $("#scheduleList0 .next");
        // }
        // console.log(b);
        //$('#timelineDirection').animate({scrollTop: b.offset().top-100});
    });

    $("#toMetro").click(function () {
        currentTableId = 1;
        $("#toMetro").addClass("is-active");
        $("#toTechn").removeClass("is-active");
        $("#timelineDirection").addClass("tube");

        if (currentWindow == 1) {
            transition1();

            $("#scheduleList1").show();
            $("#scheduleList0").hide();

            $('#timelineDirection').animate({ scrollTop: $("#scheduleList1 li.next").offset().top - $("#scheduleList1").offset().top - 60 });
        } else if (currentWindow == 2) {
            transition2();
            showMap();
        } else if (currentWindow == 3) transition3();
        // let b = $("#scheduleList1 .success");
        // if(b.length == 0){
        //     b = $("#scheduleList1 .alert");
        // }
        // if(b.length == 0){
        //     b = $("#scheduleList1 .next");
        // }

        //$('#timelineDirection').animate({scrollTop: b.offset().top-100});
    });
});
'use strict';

function transition1() {
    $('#first_alt_ways').hide();
    $('#second_alt_ways').hide();
    $('#first_scheme').hide();
    $('#second_scheme').hide();
    $('#timelineDirection').show();
    $('#first_alt_ways').hide();
    $('#second_alt_ways').hide();
    $('#First_page').attr('class', 'is-active');
    $('#Second_page').attr('class', '');
    $('#Third_page').attr('class', '');
}

function transition2() {
    $('#notification').hide();
    $('#timelineDirection').hide();
    $('.third_page').hide();
    $('#first_alt_ways').hide();
    $('#second_alt_ways').hide();
    $('#First_page').attr('class', '');
    $('#Second_page').attr('class', 'is-active');
    $('#Third_page').attr('class', '');

    if (currentTableId == 0) {
        $('#first_scheme').show();
        $('#second_scheme').hide();
    } else if (currentTableId == 1) {
        $('#first_scheme').hide();
        $('#second_scheme').show();
    }
}

function transition3() {
    $('#notification').hide();
    $('#timelineDirection').hide();
    $('#first_scheme').hide();
    $('#second_scheme').hide();
    $('#First_page').attr('class', '');
    $('#Second_page').attr('class', '');
    $('#Third_page').attr('class', 'is-active');

    if (currentTableId == 0) {
        $('#first_alt_ways').show();
        $('#second_alt_ways').hide();
    } else if (currentTableId == 1) {
        $('#first_alt_ways').hide();
        $('#second_alt_ways').show();
    }
}
"use strict";