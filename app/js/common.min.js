"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Модуль работы с гугл таблицами
 */
var currentTableId = 0;
var googleSpreadsheet;
var tableViewer;
var apiObj;

$(function googleApi() {
    var GoogleSpreadsheet = function () {
        function GoogleSpreadsheet(key, spreadsheetId) {
            _classCallCheck(this, GoogleSpreadsheet);

            this.key = key;
            this.spreadsheetId = spreadsheetId;
        }

        _createClass(GoogleSpreadsheet, [{
            key: "load",
            value: function load(sheet, range, fun) {
                var googleUrl = "https://sheets.googleapis.com/v4/spreadsheets/" + spreadsheetId + "/values/" + sheet + "!" + range + "?key=" + key;
                console.log("get:", googleUrl);
                $.getJSON(googleUrl, fun);
            }
        }]);

        return GoogleSpreadsheet;
    }();

    var API = function () {
        function API(tableViewer, googleSpreadsheet) {
            _classCallCheck(this, API);

            this.tableViewer = tableViewer;
            this.googleSpreadsheet = googleSpreadsheet;
            if (localStorage.length === 0 || localStorage.getItem(0) == null || localStorage.getItem(1) == null) {
                this.saveToLocalStorage();
                console.log("first saveToLocalStorage()");
            } else {
                console.log("first showTimetable()");
                try {
                    this.showTimetable(0);
                } catch (err) {
                    console.error("showTimetable: ", err);
                }

                if (navigator.onLine) {
                    console.log("onLine updateStorage()");
                    this.updateStorage();
                }
            }
        }

        /**
         * Запрашивает с апи гугла таблицу по урлу
         * @param sheet
         * @param range
         * @param {function} fun Что с ней делает
         */


        _createClass(API, [{
            key: "googleSpreadsheetLoad",
            value: function googleSpreadsheetLoad(sheet, range, fun) {
                this.googleSpreadsheet.load(sheet, range, function (result) {
                    console.log("\u0417\u0430\u0433\u0440\u0443\u0436\u0435\u043D \u043E\u0431\u044C\u0435\u043A\u0442:", result);
                    fun(result);
                });
            }

            /**
             * Сохранение расписания в локальное хранилище
             */

        }, {
            key: "saveToLocalStorage",
            value: function saveToLocalStorage() {
                var _this = this;

                this.googleSpreadsheetLoad("To Technopolis", "A:H", function (result) {
                    //console.log(result);
                    localStorage.setItem(0, JSON.stringify(result));
                    //this.tableViewer.addTableList(result, 0);
                });
                this.googleSpreadsheetLoad("From Technopolis", "A:H", function (result) {
                    localStorage.setItem(1, JSON.stringify(result));
                    //this.tableViewer.addTableList(result, 1);
                });
                this.googleSpreadsheetLoad("Объявления", "A:B", function (result) {
                    _this.tableViewer.addInfoList(result);
                    localStorage.setItem('info', JSON.stringify(result));
                });
                this.showTimetable(currentTableId);
                localStorage.setItem('DATE', Date());
            }

            /**
             * Обновление
             */

        }, {
            key: "updateStorage",
            value: function updateStorage() {
                this.tableViewer.cleanTableList();
                this.saveToLocalStorage();
            }
        }, {
            key: "showTimetable",
            value: function showTimetable(id) {
                this.tableViewer.addTableList(JSON.parse(localStorage.getItem(0)), 0);
                this.tableViewer.addTableList(JSON.parse(localStorage.getItem(1)), 1);
                //this.tableViewer.addTableList(JSON.parse(localStorage.getItem(id)), id);
            }
        }]);

        return API;
    }();

    var TableViewer = function () {
        function TableViewer(timetableRowClass, infoClass) {
            _classCallCheck(this, TableViewer);

            this.timetableRowClass = timetableRowClass;
            this.infoClass = infoClass;
        }

        /**
         * Добавляет информанию из таблицы
         * @param {object}   infoJSON  Обьект
         * @param {string} infoClass Класс в который добавляем
         */


        _createClass(TableViewer, [{
            key: "addInfoList",
            value: function addInfoList(infoJSON) {}
            // console.log(`f: addTableList(infoJSON=`,
            //     infoJSON,
            //     `, infoClass= ${this.infoClass})`);
            // let infoHtmlString = "";
            // infoJSON.values.shift();
            // infoJSON.values.forEach(function (msg) {
            //     infoHtmlString += `<p class="info-list--elem">
            // 						<span class="info-list--elem__title">
            // 							${msg[0]}
            // 						</span>
            // 						${msg[1]}
            // 					</p>`;
            // });
            // $(this.infoClass).append(infoHtmlString);


            /**
             * Add table list in timetable
             * @param   {object} timetableJSON     Data
             * @param   {string} timetableRowClass Table DOM class
             * @param   {number} id                Table list number
             */

        }, {
            key: "addTableList",
            value: function addTableList(timetableJSON, id) {
                console.log("f: addTableList(id=" + id + ", timetableJSON=", timetableJSON, ", timetableRowClass= " + this.timetableRowClass + ")");
                var timetableRowHtmlString = "";
                console.log(JSON.stringify(timetableJSON.values));
                var timetable = timetableJSON.values;
                var timeSort = {};
                timetable.shift();
                test_time = timetable[0][0];
                timetable.forEach(function (mins, i) {
                    var _mins$0$split = mins[0].split(':'),
                        _mins$0$split2 = _slicedToArray(_mins$0$split, 2),
                        hour = _mins$0$split2[0],
                        min = _mins$0$split2[1];

                    mins.shift();
                    if (timeSort[hour] === undefined) timeSort[hour] = [];
                    timeSort[hour].push({ min: min, mins: mins });
                });

                function compareHour(a, b) {
                    if (a.hour > b.hour) return 1;
                    if (a.hour < b.hour) return -1;
                }

                function compareMin(a, b) {
                    if (a.min > b.min) return 1;
                    if (a.min < b.min) return -1;
                }

                //timeSort = timeSort.sort(compareHour);
                for (var i = 0; i < timeSort.length; i++) {
                    timeSort[i] = timeSort[i].sort(compareMin);
                }

                //console.log(JSON.stringify(timeSort));

                for (hour in timeSort) {
                    for (index in timeSort[hour]) {
                        if (hour !== "" && timeSort[hour][index].min !== "") {
                            timetableRowHtmlString += "<li class=\"\">\n                                                <div class=\"time\">" + hour + ":" + timeSort[hour][index].min + "</div>\n                                                <div class=\"time-info\">\n                                                    <div class=\"info\"></div>\n                                                    <div class=\"desc\"></div>\n                                                </div>\n                                                 </li>";
                        }
                    }
                }

                /**
                 * Добавляет строку минут в таблицу
                 * @param hour
                 * @param   {object} mins Массив пар (Минуты:День,Id:Часы)
                 * @returns {string} Строковое представление в таблице
                 */
                function getMinsHtmlString(hour, mins) {
                    var minsHtmlString = hour + ':' + mins[0].value;
                    // mins.forEach(function (min, i) {
                    //     minsHtmlString += `<div  class="timetable__min ${getDayClassName(min.mins)}">
                    // 				${hour}:${min.min}
                    // 			</div>`;
                    // });
                    return minsHtmlString;

                    /**
                     * Добавляет класс дня недели
                     * @param   {string} tableDayName Название дня недели в таблице exel
                     * @returns {string}   Класс дня недели
                     */
                    function getDayClassName(tableDayName) {
                        //console.log(tableDayName);
                        var minDaysClassNames = "";
                        // let daysExtendtion = [...days, "All"];
                        // let count = 0;
                        // for (let i = 0; i < tableDayName.length; i++) {
                        //     if (tableDayName[i] === "") {
                        //         count++;
                        //         continue;
                        //     }
                        //     minDaysClassNames += ' day-' + daysExtendtion[i];
                        // }
                        // if (count === 0) minDaysClassNames += ' day-All';
                        return minDaysClassNames;
                    }
                }
                var idTag = this.timetableRowClass + id;
                $(idTag).html(timetableRowHtmlString);
            }
        }, {
            key: "cleanTableList",
            value: function cleanTableList() {
                $(this.timetableRowClass + currentTableId).html("");
            }
        }]);

        return TableViewer;
    }();

    var url = "https://docs.google.com/spreadsheet/pub?key=1VwgzSFxVRu2Z-9tvF8wimO2m3BmuW4ngcST5uGSRYRg&output=html";
    var key = "AIzaSyC6gFH_bbSeMSIzEexKIUQ3MGE1MK2mBdo";
    var spreadsheetId = "1Xdje643qsnGXaOjU70larjh-UFTh6Bt9ii83a7t68Oo";
    googleSpreadsheet = new GoogleSpreadsheet(key, spreadsheetId);
    tableViewer = new TableViewer("#scheduleList", ".info-list");
    apiObj = new API(tableViewer, googleSpreadsheet);

    //setLanguage("ru");
});
"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

/**
 * Модуль работы с датой
 */

$(function () {
    /**
     * Установка текущей даты, поиск следующей даты в таблице
     */
    function getDiffTime(hour, minuts) {
        var res = "";
        if (hour < 10) res = "0" + hour;else res = hour;
        if (minuts < 9) {
            res += ":0" + minuts;
        } else {
            res += ":" + minuts;
        }
        return res;
    }

    function setDate() {
        var listTo = $("#scheduleList0").get(0).children;
        var listFrom = $("#scheduleList1").get(0).children;
        var selected_item = listTo[0];
        var index = 0;
        var minDiffFromTime = 90000;
        var time = new Date();

        var timeInMins = time.getHours() * 60 + time.getMinutes();

        for (var i = 0; i < listTo.length; i++) {
            var li = listTo[i];
            var _divTime = li.children[0];
            var _divInfo = li.children[1];

            var _divTime$innerText$sp = _divTime.innerText.split(':'),
                _divTime$innerText$sp2 = _slicedToArray(_divTime$innerText$sp, 2),
                _h = _divTime$innerText$sp2[0],
                _m = _divTime$innerText$sp2[1];

            var hm = parseInt(_h) * 60 + parseInt(_m);

            if (hm > timeInMins && minDiffFromTime > Math.abs(timeInMins - hm)) {
                selected_item = li;
                index = i;
                minDiffFromTime = Math.abs(timeInMins - hm);
                // console.log(minDiffFromTime);
            }
        }
        if (minDiffFromTime == 90000) {
            var _divTime2 = listTo[0].children[0];
            var _divInfo2 = listTo[0].children[1];

            var _divTime2$innerText$s = _divTime2.innerText.split(':'),
                _divTime2$innerText$s2 = _slicedToArray(_divTime2$innerText$s, 2),
                _h2 = _divTime2$innerText$s2[0],
                _m2 = _divTime2$innerText$s2[1];

            var _hm = parseInt(_h2) * 60 + parseInt(_m2);

            minDiffFromTime = _hm + 1440 - timeInMins;
        }
        var divTime = selected_item.children[0];
        var divInfo = selected_item.children[1];

        var _divTime$innerText$sp3 = divTime.innerText.split(':'),
            _divTime$innerText$sp4 = _slicedToArray(_divTime$innerText$sp3, 2),
            h = _divTime$innerText$sp4[0],
            m = _divTime$innerText$sp4[1];

        $("ul #scheduleList0 li .success").removeClass();
        $("ul #scheduleList0 li .alert").removeClass();
        var hourDiff = Math.floor(minDiffFromTime / 60);
        var minutsDiff = minDiffFromTime % 60;

        if (minDiffFromTime > 5 && minDiffFromTime <= 10) {
            selected_item.className = "success";

            divInfo.children[0].innerText = 'Через ' + getDiffTime(hourDiff, minutsDiff);
        } else {
            selected_item.className = "alert";
            divInfo.children[0].innerText = 'Через ' + getDiffTime(hourDiff, minutsDiff);
        }
        $(selected_item).addClass("next");

        minDiffFromTime = 90000;
        index = 0;
        selected_item = listFrom[0];
        for (var _i = 0; _i < listFrom.length; _i++) {
            var _li = listFrom[_i];
            var _divTime3 = _li.children[0];
            var _divInfo3 = _li.children[1];

            var _divTime3$innerText$s = _divTime3.innerText.split(':'),
                _divTime3$innerText$s2 = _slicedToArray(_divTime3$innerText$s, 2),
                _h3 = _divTime3$innerText$s2[0],
                _m3 = _divTime3$innerText$s2[1];

            var _hm2 = parseInt(_h3) * 60 + parseInt(_m3);

            if (_hm2 > timeInMins && minDiffFromTime > Math.abs(_hm2 - timeInMins)) {
                selected_item = _li;
                index = _i;
                minDiffFromTime = Math.abs(timeInMins - _hm2);
                // console.log(minDiffFromTime);
            }
        }
        if (minDiffFromTime == 90000) {
            var _divTime4 = listFrom[0].children[0];
            var _divInfo4 = listFrom[0].children[1];

            var _divTime4$innerText$s = _divTime4.innerText.split(':'),
                _divTime4$innerText$s2 = _slicedToArray(_divTime4$innerText$s, 2),
                _h4 = _divTime4$innerText$s2[0],
                _m4 = _divTime4$innerText$s2[1];

            var _hm3 = parseInt(_h4) * 60 + parseInt(_m4);

            minDiffFromTime = _hm3 + 1440 - timeInMins;
        }
        divTime = selected_item.children[0];
        divInfo = selected_item.children[1];

        $("ul #scheduleList1 li .success").removeClass();
        $("ul #scheduleList1 li .alert").removeClass();

        hourDiff = Math.floor(minDiffFromTime / 60);
        minutsDiff = minDiffFromTime % 60;

        if (minDiffFromTime > 5 && minDiffFromTime <= 10) {
            selected_item.className = "success";

            divInfo.children[0].innerText = 'Через ' + getDiffTime(hourDiff, minutsDiff);
        } else {
            selected_item.className = "alert";
            divInfo.children[0].innerText = 'Через ' + getDiffTime(hourDiff, minutsDiff);
        }
        $(selected_item).addClass("next");
    }

    setDate();
    setInterval(setDate, 10000);
});
"use strict";

$(function () {
    $("#scheduleList1").hide();
    var listTo = $("#scheduleList0").get(0).children;
    var listFrom = $("#scheduleList1").get(0).children;
    var lastLi = listTo[listTo.length - 1];
    lastLi.className = "warning";

    console.log(lastLi);
    lastLi.children[1].children[1].innerText = "Всегда есть другие варианты";

    lastLi = listFrom[listFrom.length - 1];
    lastLi.className = "warning";
    lastLi.children[1].children[1].innerText = "Всегда есть другие варианты";
});
'use strict';

/**
 * Модуль карты
 * @param {object} function ( Инициализация карты
 */
$(function () {
  /**
   * Инициализация карты
   */
  function init() {
    var places = {
      metro: [59.853876, 30.321102],
      technopolis: [59.818043, 30.327938],
      metro1: [59.850127, 30.321772],
      routeCenter: [59.835681, 30.322253]
    };
    var from = places.metro,
        to = places.technopolis;
    var myMap = new ymaps.Map('map', {
      center: places.metro,
      zoom: 16
    }, {
      searchControlProvider: 'yandex#search'

    }),
        myPlacemark = new ymaps.Placemark(myMap.getCenter());

    myMap.geoObjects.add(myPlacemark);
    var myRoute = void 0;

    function addRoute(from, to) {
      ymaps.route([{
        point: from,
        type: 'viaPoint'
      }, to]).then(function (route) {
        myMap.geoObjects.add(myRoute = route);
      }, function (error) {
        console.error('Возникла ошибка: ' + error.message);
      });
    }
    var routeButton = new ymaps.control.Button('<i class="fa fa-bus" style="color: dimgray"></i>');

    routeButton.events.add('select', function () {
      addRoute(from, to);
      myMap.setZoom(12);
      myMap.setCenter(places.routeCenter);
    }).add('deselect', function () {
      myRoute && myMap.geoObjects.remove(myRoute);
    });

    myMap.controls.add(routeButton, { float: 'left', maxWidth: 'auto' });

    myPlacemark.events.add('mouseenter', function (e) {
      // Ссылку на объект, вызвавший событие,
      // можно получить из поля 'target'.
      e.get('target').options.set('preset', 'islands#greenIcon');
    }).add('mouseleave', function (e) {
      e.get('target').options.unset('preset');
    });

    function changeRoute() {
      if (routeButton.isSelected()) {
        myRoute && myMap.geoObjects.remove(myRoute);
        addRoute(from, to);
      }
    }

    // $(".from_technopolis").click(function () {
    // 	myMap.setCenter(places.technopolis);
    //    myPlacemark.geometry.setCoordinates(myMap.getCenter());
    //    from = places.technopolis;
    //    to= places.metro1;
    //    changeRoute();
    //    myMap.setZoom(16);
    // });
    //
    // $(".to_technopolis").click(function () {
    // 	myMap.setCenter(places.metro);
    // 	myPlacemark.geometry.setCoordinates(myMap.getCenter());
    //    from=places.metro;
    //    to=places.technopolis;
    //    changeRoute();
    //    myMap.setZoom(16);
    // });

  }

  //ymaps.ready(init);
});
"use strict";

var notificationNumber = 0;
var notificationList;

function hideNotification() {
    $('#notification').hide();
    notificationNumber++;
    getNotification();
}

function getNotification() {

    if (notificationNumber < notificationList.length) {
        var notification = notificationList[notificationNumber];

        $("#title_notification").text(notification[0]);
        $("#output_notification").text(notification[1]);
        $('#notification').show();
    }
}

$(function () {
    $('#notification').click(function () {
        hideNotification();
    });
    var notificationJSON = JSON.parse(localStorage.getItem('info'));
    console.log(notificationJSON);
    var notification = notificationJSON.values;
    notification.shift();
    notificationList = notification;

    getNotification();
});
/**
 * Модуль отрисовка боковой панели 
 */
// $(function(){
// 	(function(){
// 		let strDOM = "";
// 		days.forEach(function (day, i) {
// 			strDOM+= `<div class="panel--button panel--button-${i} day-${day}">
// 						<span name="${day}"></span>
// 					</div>`;
// 		});
// 		$(".panel").append(strDOM);
//
// 		days.forEach(function (day) {
// 			$(`.panel--button.day-${day}`).click(function () {
// 				console.log(day, " clicked");
// 				days.forEach(function (dayin) {
// 					$(`.timetable__min.day-${dayin}`).removeClass("spy");
// 					console.log(dayin, " removeClass")
// 				});
// 				$(`.timetable__min.day-${day}`).addClass("spy");
// 				console.log(day, " addClass");
// 				setTimeout(function(){
// 					days.forEach(function (dayin) {
// 					$(`.timetable__min.day-${dayin}`).removeClass("spy");
// 					console.log(dayin, " removeClass")
// 				});
// 				},3000);
//
// 			});
// 		});
// 	})();
//
// });
"use strict";
"use strict";

/**
 * Модуль установки времени показа заставки
 */
$(function () {
  // Установка времени показа заставки
  $(".preloader").delay(1000).fadeOut("slow");
});
//
// $(".xls").click(function(){
//     location.href = "https://docs.google.com/spreadsheet/pub?key=1Xdje643qsnGXaOjU70larjh-UFTh6Bt9ii83a7t68Oo&output=xls";
// })
//
// $(".pdf").click(function(){
//     location.href = "https://docs.google.com/spreadsheet/pub?key=1Xdje643qsnGXaOjU70larjh-UFTh6Bt9ii83a7t68Oo&output=pdf";
// })
"use strict";
"use strict";

/**
 * Модуль установки событий работы с свичём
 */
// $(function () {
//     $(".russian").button('toggle');
//     $(".russian").click(function () {
//         setLanguage("ru");
//         $('#map').attr('lang','ru');
//     });
// 	$(".russian").click();
//     $(".english").click(function () {
//         setLanguage("en");
//         $('#map').attr('lang','en');
//     });
// 	$(".lang").addClass("btn-group-vertical");
// 	$(".lang").removeClass("btn-group");
//     $(".to_technopolis").button('toggle');
// 	$(".to_technopolis").click(function () {
// 			$("#route0").css("visibility", "visible");
// 			$("#route0").css("position", "initial");
// 			$("#route1").css("visibility", "hidden");
// 			$("#route1").css("position", "absolute");
//     });
// 	$(".from_technopolis").click(function () {
//         $("#route0").css("visibility", "hidden");
// 			$("#route0").css("position", "absolute");
// 			$("#route1").css("visibility", "visible");
// 			$("#route1").css("position", "initial");
//     });
// });
$(function switchs() {

    $("#toTechn").click(function () {
        currentTableId = 0;
        $("#toTechn").addClass("is-active");
        $("#toMetro").removeClass("is-active");
        $("#timelineDirection").removeClass("tube");
        $("#scheduleList1").hide();
        $("#scheduleList0").show();

        // let b = $("#scheduleList0 .success");
        // if(b.length == 0){
        //     b = $("#scheduleList0 .alert");
        // }
        // if(b.length == 0){
        //     b = $("#scheduleList0 .next");
        // }
        // console.log(b);
        //$('#timelineDirection').animate({scrollTop: b.offset().top-100});

        var sl = document.querySelector("#scheduleList0 .succes");
        if (!sl) {
            sl = document.querySelector("#scheduleList0 .alert");
        }
        if (!sl) {
            sl = document.querySelector("#scheduleList0 .next");
        }

        $('#timelineDirection').animate({ scrollTop: $("#scheduleList0 li.next").offset().top - $("#scheduleList0").offset().top - 60 });
    });

    $("#toMetro").click(function () {
        currentTableId = 1;
        $("#toMetro").addClass("is-active");
        $("#toTechn").removeClass("is-active");
        $("#timelineDirection").addClass("tube");
        $("#scheduleList1").show();
        $("#scheduleList0").hide();

        // let b = $("#scheduleList1 .success");
        // if(b.length == 0){
        //     b = $("#scheduleList1 .alert");
        // }
        // if(b.length == 0){
        //     b = $("#scheduleList1 .next");
        // }

        //$('#timelineDirection').animate({scrollTop: b.offset().top-100});


        $('#timelineDirection').animate({ scrollTop: $("#scheduleList1 li.next").offset().top - $("#scheduleList1").offset().top - 60 });
    });
});
'use strict';

var days = ['monday', 'tuesday', 'tednesday', 'thursday', 'friday', 'saturday', 'sunday'];
var fullDays = ['fullMonday', 'fullTuesday', 'fullTednesday', 'fullThursday', 'fullFriday', 'fullSaturday', 'fullSunday'];

/**
 * Установка языка сайта
 * @param {string} lang Пользовательская локаль
 */
// function setLanguage(lang) {
// 	$.getJSON(`lang/${lang}.json`, function (data) {
// 		$.each(data, function (key, val) {
// 			$(`[name = ${key}]`).html(val);
// 		});
// });}

// UpUp.start({
//   'content-url': 'index.html',
//   'assets': ['/img/technopolis.jpg', '/css/main.min.css', '/lang/en.json', '/lang/ru.json','/js/scripts.min.js'],
//   'service-worker-url': '/upup.sw.min.js'
// });