'use strict';

//Константы и глобальные переменные
//
var days = ['monday', 'tuesday', 'tednesday', 'thursday', 'friday', 'saturday', 'sunday'];
var fullDays = ['fullMonday', 'fullTuesday', 'fullTednesday', 'fullThursday', 'fullFriday', 'fullSaturday', 'fullSunday'];
var inWeekDays = ['Воскресенье', 'Понедельник', 'Вторник', 'Среду', 'Четверг', 'Пятницу', 'Субботу'];

var currentTableId = 0;
var currentWindow = 1;
var googleSpreadsheet;
var tableViewer;
var apiObj;
var infoList = [];
var sortedTimeLists = { 'to': [], 'from': [] };
var notificationNumber = 0;

var isLoadedMaps = false;

//Параметр для включения геолокации
var isGeoLocationOn = true;

var key = "AIzaSyAl9aZAZCbOAYhUl0RH57S9cnAPMnG3LLs";
var spreadsheetId = "10db0NtOmOC5TLw0WBuzFCGtoVa1GaFYDeUqIADh6p1E";

//Параметры для запросов
var ToTecnopolis = "To Technopolis";
var rangeTo = "A:H";

var FromTechnopolis = "From Technopolis";
var rangeFrom = "A:H";

var Info = "Info";
var InfoRange = "A:B";

//global application time
function getCurrentTime() {
    var now = new Date();
    // now.setHours(11);
    // now.setMinutes(15);
    return now;
}

/**
 * Установка языка сайта
 * @param {string} lang Пользовательская локаль
 */
// function setLanguage(lang) {
// 	$.getJSON(`lang/${lang}.json`, function (data) {
// 		$.each(data, function (key, val) {
// 			$(`[name = ${key}]`).html(val);
// 		});
// });}

// UpUp.start({
//   'content-url': 'index.html',
//   'assets': ['/img/technopolis.jpg', '/css/main.min.css', '/lang/en.json', '/lang/ru.json','/js/scripts.min.js'],
//   'service-worker-url': '/upup.sw.min.js'
// });
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Модуль работы с гугл таблицами
 */

$(function googleApi() {
    var GoogleSpreadsheet = function () {
        function GoogleSpreadsheet(key, spreadsheetId) {
            _classCallCheck(this, GoogleSpreadsheet);

            this.key = key;
            this.spreadsheetId = spreadsheetId;
        }

        _createClass(GoogleSpreadsheet, [{
            key: 'load',
            value: function load(sheet, range, fun) {
                var googleUrl = 'https://sheets.googleapis.com/v4/spreadsheets/' + spreadsheetId + '/values/' + sheet + '!' + range + '?key=' + key;
                $.getJSON(googleUrl, fun);
            }
        }]);

        return GoogleSpreadsheet;
    }();

    var API = function () {
        function API(tableViewer, googleSpreadsheet) {
            _classCallCheck(this, API);

            this.tableViewer = tableViewer;
            this.googleSpreadsheet = googleSpreadsheet;
            if (localStorage.length === 0 || localStorage.getItem(0) == null || localStorage.getItem(1) == null) {
                //не трогать!
                $.ajaxSetup({
                    async: false
                });
                this.saveToLocalStorage();
                $.ajaxSetup({
                    async: true
                });
            } else {

                if (navigator.onLine) {
                    this.saveToLocalStorage();
                    this.updateStorage();
                    //this.showTimetable(0);
                }
                try {
                    this.showTable();
                } catch (err) {
                    console.error("showTimetable: ", err);
                }
            }
        }

        /**
         * Запрашивает с апи гугла таблицу по урлу
         * @param sheet
         * @param range
         * @param {function} fun Что с ней делает
         */


        _createClass(API, [{
            key: 'googleSpreadsheetLoad',
            value: function googleSpreadsheetLoad(sheet, range, fun) {
                this.googleSpreadsheet.load(sheet, range, function (result) {
                    fun(result);
                });
            }

            /**
             * Сохранение расписания в локальное хранилище
             */

        }, {
            key: 'saveToLocalStorage',
            value: function saveToLocalStorage() {
                var _this = this;

                this.googleSpreadsheetLoad(ToTecnopolis, rangeTo, function (result) {
                    localStorage.setItem(0, JSON.stringify(result));
                });
                this.googleSpreadsheetLoad(FromTechnopolis, rangeFrom, function (result) {
                    localStorage.setItem(1, JSON.stringify(result));
                });
                this.googleSpreadsheetLoad(Info, InfoRange, function (result) {
                    _this.tableViewer.addInfoList(result);
                    //localStorage.setItem('info', JSON.stringify(result));
                });
                this.showTimetable(currentTableId);
                localStorage.setItem('DATE', Date());
            }

            /**
             * Обновление
             */

        }, {
            key: 'updateStorage',
            value: function updateStorage() {
                this.tableViewer.cleanTableList();
                this.saveToLocalStorage();
            }
        }, {
            key: 'showTable',
            value: function showTable() {
                var now = getCurrentTime();

                console.log(now);
                if (now.getDay() === 0 || now.getDay() === 6) {
                    $('.js-weekend-splash').show();
                }
                this.showTimetable();
            }
        }, {
            key: 'showTimetable',
            value: function showTimetable() {
                this.tableViewer.addTableList(JSON.parse(localStorage.getItem(0)), 0);
                this.tableViewer.addTableList(JSON.parse(localStorage.getItem(1)), 1);
                //this.tableViewer.addTableList(JSON.parse(localStorage.getItem(id)), id);
            }
        }]);

        return API;
    }();

    var TableViewer = function () {
        function TableViewer(timetableRowClass, infoClass) {
            _classCallCheck(this, TableViewer);

            this.timetableRowClass = timetableRowClass;
            this.infoClass = infoClass;
        }

        /**
         * Добавляет информанию из таблицы
         * @param {object}   infoJSON  Обьект
         * @param {string} infoClass Класс в который добавляем
         */


        _createClass(TableViewer, [{
            key: 'addInfoList',
            value: function addInfoList(infoJSON) {
                var notifications = infoJSON.values;
                notifications.shift();
                infoList = notifications;
                this.showNotification();
            }

            /**
             * Отображает уведомление
             */

        }, {
            key: 'showNotification',
            value: function showNotification() {
                if (infoList.length === 0 && localStorage.getItem('info') != null) {
                    // infoList = JSON.parse(localStorage.getItem('info')).values;
                    infoList = ['', ''];
                }
                var notification = infoList[notificationNumber];
                if (notification[1].length + notification[0].length > 0) {
                    $("#output_notification").text(notification[1]);
                    $('#notification').show();
                }
            }

            /**
             * Add table list in timetable
             * @param   {object} timetableJSON     Data
             * @param   {string} timetableRowClass Table DOM class
             * @param   {number} id                Table list number
             */

        }, {
            key: 'addTableList',
            value: function addTableList(timetableJSON, id) {

                var timetableRowHtmlString = "";

                var timetable = timetableJSON.values;
                var timeSort = {};
                timetable.shift();

                timetable.forEach(function (mins, i) {
                    var _mins$0$split = mins[0].split(':'),
                        _mins$0$split2 = _slicedToArray(_mins$0$split, 2),
                        hour = _mins$0$split2[0],
                        min = _mins$0$split2[1];

                    mins.shift();
                    if (timeSort[hour] === undefined) timeSort[hour] = [];
                    timeSort[hour].push({ min: min, mins: mins });
                });

                function compareHour(a, b) {
                    if (a.hour > b.hour) return 1;
                    if (a.hour < b.hour) return -1;
                }

                function compareMin(a, b) {
                    if (a.min > b.min) return 1;
                    if (a.min < b.min) return -1;
                }

                //timeSort = timeSort.sort(compareHour);
                for (var i = 0; i < timeSort.length; i++) {
                    timeSort[i] = timeSort[i].sort(compareMin);
                }
                if (id === 0) sortedTimeLists.to = timeSort;else sortedTimeLists.from = timeSort;

                for (hour in timeSort) {
                    for (index in timeSort[hour]) {
                        if (hour !== "" && timeSort[hour][index].min !== "") {
                            var weekCount = 0;
                            var weekSelect = timeSort[hour][index].mins;
                            for (var _i = 0; _i < weekSelect.length; _i++) {
                                if (weekSelect[_i].length > 0) weekCount++;
                            }
                            var disableClass = "";
                            var specialInfo = "";
                            if (weekCount < 5) {
                                var now = getCurrentTime();
                                var weekDayNumber = now.getDay();

                                var itIsSuperLongIteratorButInVeryUseful = (weekDayNumber + 6) % 7;
                                if (weekSelect[itIsSuperLongIteratorButInVeryUseful] && weekSelect[itIsSuperLongIteratorButInVeryUseful].length > 0) {
                                    disableClass = 'redline';
                                    specialInfo = "Только сегодня";
                                } else {
                                    disableClass = "disabled";
                                    specialInfo = "В ";
                                    for (var _i2 = 0; _i2 < weekSelect.length; _i2++) {
                                        if (weekSelect[_i2].length > 0) {
                                            specialInfo += inWeekDays[(_i2 + 1) % 7] + " ";
                                        }
                                    }
                                }
                            }
                            timetableRowHtmlString += '<li class="' + disableClass + ' ">\n                                                <div class="time">' + hour + ':' + timeSort[hour][index].min + '</div>\n                                                <div class="time-info">\n                                                    <div class="info">' + specialInfo + '</div>\n                                                    <div class="desc"></div>\n                                                </div>\n                                                 </li>';
                        }
                    }
                }

                /**
                 * Добавляет строку минут в таблицу
                 * @param hour
                 * @param   {object} mins Массив пар (Минуты:День,Id:Часы)
                 * @returns {string} Строковое представление в таблице
                 */
                function getMinsHtmlString(hour, mins) {
                    var minsHtmlString = hour + ':' + mins[0].value;
                    // mins.forEach(function (min, i) {
                    //     minsHtmlString += `<div  class="timetable__min ${getDayClassName(min.mins)}">
                    // 				${hour}:${min.min}
                    // 			</div>`;
                    // });
                    return minsHtmlString;

                    /**
                     * Добавляет класс дня недели
                     * @param   {string} tableDayName Название дня недели в таблице exel
                     * @returns {string}   Класс дня недели
                     */
                    function getDayClassName(tableDayName) {
                        //console.log(tableDayName);
                        var minDaysClassNames = "";
                        // let daysExtendtion = [...days, "All"];
                        // let count = 0;
                        // for (let i = 0; i < tableDayName.length; i++) {
                        //     if (tableDayName[i] === "") {
                        //         count++;
                        //         continue;
                        //     }
                        //     minDaysClassNames += ' day-' + daysExtendtion[i];
                        // }
                        // if (count === 0) minDaysClassNames += ' day-All';
                        return minDaysClassNames;
                    }
                }

                var idTag = this.timetableRowClass + id;
                $(idTag).html(timetableRowHtmlString);
            }
        }, {
            key: 'cleanTableList',
            value: function cleanTableList() {
                $(this.timetableRowClass + currentTableId).html("");
            }
        }]);

        return TableViewer;
    }();

    googleSpreadsheet = new GoogleSpreadsheet(key, spreadsheetId);
    tableViewer = new TableViewer("#scheduleList", ".info-list");
    apiObj = new API(tableViewer, googleSpreadsheet);

    //setLanguage("ru");
});
"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

/**
 * Модуль работы с датой
 */

$(function () {
    /**
     * Установка текущей даты, поиск следующей даты в таблице, выделение ближайшего рейса, добавление перерыва,
     * отсчёт времени
     */
    function getDiffTime(hour, minuts) {
        var res = "";
        if (hour > 0) {
            if (hour < 10) res = "0" + hour;else res = hour;
            res += ' ч ';
        }

        if (minuts < 10) {
            res += "0" + minuts;
        } else {
            res += minuts;
        }
        res += ' мин';
        return res;
    }

    function addBreaks(list) {

        var breakPoints = [];
        var now = getCurrentTime();

        var time = now.getHours() * 60 + now.getMinutes();
        var disabledClass = "";
        for (var i = 1; i < list.length - 1; i++) {
            //console.log(list[i]);
            var _list$i$children$0$in = list[i].children[0].innerText.split(':'),
                _list$i$children$0$in2 = _slicedToArray(_list$i$children$0$in, 2),
                h1 = _list$i$children$0$in2[0],
                m1 = _list$i$children$0$in2[1];

            var _list$children$0$inne = list[i + 1].children[0].innerText.split(':'),
                _list$children$0$inne2 = _slicedToArray(_list$children$0$inne, 2),
                h2 = _list$children$0$inne2[0],
                m2 = _list$children$0$inne2[1];

            var start = parseInt(h1) * 60 + parseInt(m1);
            var end = parseInt(h2) * 60 + parseInt(m2);

            var differenceTime = end - start;
            var difH = Math.floor(differenceTime / 60);
            var difM = differenceTime % 60;
            if (differenceTime >= 40 && (start > time || end <= time)) {
                breakPoints.push(list[i]);
                disabledClass = "";
                if (end <= time) {
                    disabledClass = 'disabled';
                }
                $(list[i]).after("<li class=\"break " + disabledClass + "\"><div class=\"time-info\">" + "<div class=\"info\">Перерыв " + getDiffTime(difH, difM) + "</div>" + "<div class=\"desc\"></div></div></li>");
            }
        }

        // for(let i = 0; i < breakPoints.length - 1; i++){
        //     let [h1, m1] = breakPoints[i].children[0].innerText.split(':');
        //     let end = parseInt(h1) * 60 + parseInt(m1);
        //
        //     $(breakPoints[i]).after("<li class=\"fantom-break "+disabledClass+"\"><div class=\"time-info\">" +
        //         "<div class=\"info\">Перерыв " + getDiffTime(0, 40)+"</div>" +
        //         "<div class=\"desc\"></div></div></li>");
        // }
    }

    function setDate() {

        apiObj.showTimetable(0);

        var listTo = [].slice.call($("#scheduleList0").get(0).children);
        var listFrom = [].slice.call($("#scheduleList1").get(0).children);

        var selected_item = listTo[0];
        var index = 0;
        var minDiffFromTime = 90000;
        var time = getCurrentTime();

        var timeInMins = time.getHours() * 60 + time.getMinutes();

        //Поиск и выделение элемента в таблице к технополису
        for (var i = 0; i < listTo.length; i++) {
            var li = listTo[i];
            var _divTime = li.children[0];
            var _divInfo = li.children[1];

            var _divTime$innerText$sp = _divTime.innerText.split(':'),
                _divTime$innerText$sp2 = _slicedToArray(_divTime$innerText$sp, 2),
                _h = _divTime$innerText$sp2[0],
                _m = _divTime$innerText$sp2[1];

            var hm = parseInt(_h) * 60 + parseInt(_m);

            if (hm > timeInMins && minDiffFromTime > Math.abs(timeInMins - hm) && !$(li).hasClass('shadow')) {
                selected_item = li;
                index = i;
                minDiffFromTime = Math.abs(timeInMins - hm);
            }
        }

        if (minDiffFromTime === 90000) {

            $('#scheduleList0 li.warning').after("<li class=\"break fone next is-active\"><div class=\"time-info\">" + "<div class=\"info\">Рейсы закончились</div>" + "<div class=\"desc\">Воспользуйтесь общественным транспортом &#10095</div></div></li>");
        }
        var divTime = selected_item.children[0];
        var divInfo = selected_item.children[1];

        var _divTime$innerText$sp3 = divTime.innerText.split(':'),
            _divTime$innerText$sp4 = _slicedToArray(_divTime$innerText$sp3, 2),
            h = _divTime$innerText$sp4[0],
            m = _divTime$innerText$sp4[1];

        var hourDiff = Math.floor(minDiffFromTime / 60);
        var minutsDiff = minDiffFromTime % 60;

        if (minDiffFromTime > 5 && minDiffFromTime <= 10) {
            //selected_item.className = "success";
            $(selected_item).addClass("success");
            divInfo.children[0].innerText = 'Через ' + getDiffTime(hourDiff, minutsDiff);
        } else {
            if (minDiffFromTime <= 5) {
                //selected_item.className = "alert";
                $(selected_item).addClass("alert");
                divInfo.children[0].innerText = 'Через ' + getDiffTime(hourDiff, minutsDiff);
            }
        }
        if (minDiffFromTime < 90000) {
            $(selected_item).addClass("next");
        }

        if (index < listTo.length - 1 && ($(selected_item).hasClass('success') || $(selected_item).hasClass('alert'))) {
            var nextIndex = index + 1;
            while (nextIndex < listTo.length && $(listTo[nextIndex]).hasClass('shadow')) {
                nextIndex++;
            }if (nextIndex < listTo.length) {
                var nextTime = listTo[nextIndex].children[0];

                var _nextTime$innerText$s = nextTime.innerText.split(':'),
                    _nextTime$innerText$s2 = _slicedToArray(_nextTime$innerText$s, 2),
                    _h2 = _nextTime$innerText$s2[0],
                    _m2 = _nextTime$innerText$s2[1];

                var nextTimeInMinutes = parseInt(_h2) * 60 + parseInt(_m2);
                var difMins = nextTimeInMinutes - timeInMins;
                while (difMins < 0) {
                    difMins += 24 * 60;
                }
                var _hourDiff = Math.floor(difMins / 60);
                var _minutsDiff = difMins % 60;

                divInfo.children[1].innerText = "Следующий за ним - через " + getDiffTime(_hourDiff, _minutsDiff);
            }
        }

        if ($(selected_item).hasClass('warning')) {
            divInfo.children[1].innerHTML = "Всегда есть другие варианты &#10095;";
            $(selected_item).addClass("anotherVariants");
        }

        if (index > 0) {
            var _listTo$children$0$in = listTo[index - 1].children[0].innerText.split(':');

            var _listTo$children$0$in2 = _slicedToArray(_listTo$children$0$in, 2);

            hv1 = _listTo$children$0$in2[0];
            mi1 = _listTo$children$0$in2[1];

            a = $(listTo[index]).hasClass('shadow');
            if (a) {
                var _listTo$children$0$in3 = listTo[index + 1].children[0].innerText.split(':');

                var _listTo$children$0$in4 = _slicedToArray(_listTo$children$0$in3, 2);

                hv2 = _listTo$children$0$in4[0];
                mi2 = _listTo$children$0$in4[1];
            } else {
                var _listTo$index$childre = listTo[index].children[0].innerText.split(':');

                var _listTo$index$childre2 = _slicedToArray(_listTo$index$childre, 2);

                hv2 = _listTo$index$childre2[0];
                mi2 = _listTo$index$childre2[1];
            }
            pereriv = mi2 - mi1 + hv2 * 60 - hv1 * 60;
        } else {
            pereriv = 200;
        }

        if (pereriv >= 40 && pereriv < 200) {
            $(selected_item).before("<li class=\"break fone is-active\"><div class=\"time-info\">" + "<div class=\"info\">Перерыв " + minDiffFromTime + " минут</div>" + "<div class=\"desc\">Воспользуйтесь общественным транспортом &#10095</div></div></li>");

            if (currentTableId === 0) $(".fone").show();
        } else {
            if (minDiffFromTime > 10 && minDiffFromTime < 40) {
                divInfo.children[0].innerText = 'Через ' + getDiffTime(hourDiff, minutsDiff);
                divInfo.children[1].innerHTML = "Всегда есть другие варианты &#10095;";
                $(selected_item).addClass("anotherVariants");
            }
        }

        //Поиск и выделение элемента в таблице к метро

        minDiffFromTime = 90000;
        index = 0;
        selected_item = listFrom[0];
        for (var _i = 0; _i < listFrom.length; _i++) {
            var _li = listFrom[_i];
            var _divTime2 = _li.children[0];
            var _divInfo2 = _li.children[1];

            var _divTime2$innerText$s = _divTime2.innerText.split(':'),
                _divTime2$innerText$s2 = _slicedToArray(_divTime2$innerText$s, 2),
                _h3 = _divTime2$innerText$s2[0],
                _m3 = _divTime2$innerText$s2[1];

            var _hm = parseInt(_h3) * 60 + parseInt(_m3);

            if (_hm > timeInMins && minDiffFromTime > Math.abs(_hm - timeInMins) && !$(_li).hasClass('shadow')) {
                selected_item = _li;
                index = _i;
                minDiffFromTime = Math.abs(timeInMins - _hm);
                // console.log(minDiffFromTime);
            }
        }
        if (minDiffFromTime === 90000) {

            $('#scheduleList1 li.warning').after("<li class=\"break fone is-active\"><div class=\"time-info\">" + "<div class=\"info\">Рейсы закончились</div>" + "<div class=\"desc\">Воспользуйтесь общественным транспортом &#10095</div></div></li>");
        }
        divTime = selected_item.children[0];
        divInfo = selected_item.children[1];

        hourDiff = Math.floor(minDiffFromTime / 60);
        minutsDiff = minDiffFromTime % 60;

        var pereriv = void 0;
        if (index > 0) {
            var _listFrom$children$0$ = listFrom[index - 1].children[0].innerText.split(':');

            var _listFrom$children$0$2 = _slicedToArray(_listFrom$children$0$, 2);

            hv1 = _listFrom$children$0$2[0];
            mi1 = _listFrom$children$0$2[1];

            a = $(listFrom[index]).hasClass('shadow');
            if (a) {
                var _listFrom$children$0$3 = listFrom[index + 1].children[0].innerText.split(':');

                var _listFrom$children$0$4 = _slicedToArray(_listFrom$children$0$3, 2);

                hv2 = _listFrom$children$0$4[0];
                mi2 = _listFrom$children$0$4[1];
            } else {
                var _listFrom$index$child = listFrom[index].children[0].innerText.split(':');

                var _listFrom$index$child2 = _slicedToArray(_listFrom$index$child, 2);

                hv2 = _listFrom$index$child2[0];
                mi2 = _listFrom$index$child2[1];
            }

            pereriv = mi2 - mi1 + hv2 * 60 - hv1 * 60;
        } else {
            pereriv = 200;
        }

        if (pereriv >= 40 && pereriv < 200) {
            if (minDiffFromTime > 10) {
                $(selected_item).before("<li class=\"break ftwo is-active\"><div class=\"time-info\">" + "<div class=\"info\">Перерыв " + getDiffTime(hourDiff, minutsDiff) + "т</div>" + "<div class=\"desc\">Воспользуйтесь общественным транспортом &#10095</div></div></li>");

                if (currentTableId === 1) {
                    $(".ftwo").show();
                }
            }
        } else {
            //$(".break ftwo").remove();
            if (minDiffFromTime > 10 && minDiffFromTime < 40) {
                divInfo.children[0].innerText = 'Через ' + getDiffTime(hourDiff, minutsDiff);
                divInfo.children[1].innerHTML = "Всегда есть другие варианты &#10095;";
                $(selected_item).addClass("anotherVariants");
            }
        }

        if (minDiffFromTime > 5 && minDiffFromTime <= 10) {
            $(selected_item).addClass("success");
            //selected_item.className = "success";

            divInfo.children[0].innerText = 'Через ' + getDiffTime(hourDiff, minutsDiff);
        } else {
            if (minDiffFromTime <= 5) {
                $(selected_item).addClass("alert");
                //selected_item.className = "alert";
                divInfo.children[0].innerText = 'Через ' + getDiffTime(hourDiff, minutsDiff);
            }
        }
        if (minDiffFromTime < 90000) {
            $(selected_item).addClass("next");
        }

        if (index < listFrom.length - 1 && ($(selected_item).hasClass('success') || $(selected_item).hasClass('alert'))) {
            var _nextIndex = index + 1;
            var teta = !$(listFrom[_nextIndex]).hasClass('shadow');
            while (_nextIndex < listFrom.length && $(listFrom[_nextIndex]).hasClass('shadow')) {
                _nextIndex++;
            }if (_nextIndex < listFrom.length) {
                var _nextTime = listFrom[_nextIndex].children[0];

                var _nextTime$innerText$s3 = _nextTime.innerText.split(':'),
                    _nextTime$innerText$s4 = _slicedToArray(_nextTime$innerText$s3, 2),
                    _h4 = _nextTime$innerText$s4[0],
                    _m4 = _nextTime$innerText$s4[1];

                var _nextTimeInMinutes = parseInt(_h4) * 60 + parseInt(_m4);
                var _difMins = _nextTimeInMinutes - timeInMins;
                while (_difMins < 0) {
                    _difMins += 24 * 60;
                }
                var _hourDiff2 = Math.floor(_difMins / 60);
                var _minutsDiff2 = _difMins % 60;

                divInfo.children[1].innerText = "Следующий за ним - через " + getDiffTime(_hourDiff2, _minutsDiff2);
            }
        }
        if ($(selected_item).hasClass('warning')) {
            divInfo.children[1].innerHTML = "Всегда есть другие варианты &#10095;";
            $(selected_item).addClass("anotherVariants");
        }

        addBreaks(listTo);
        addBreaks(listFrom);

        $('li.break.is-active').click(function () {
            $('#Third_page').trigger('click');
        });
        $('li.anotherVariants').click(function () {
            $('#Third_page').trigger('click');
        });
    }

    setDate();
    setInterval(setDate, 30000);
});
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// Device.js
// (c) 2014 Matthew Hudson
// Device.js is freely distributable under the MIT license.
// For all details and documentation:
// http://matthewhudson.me/projects/device.js/

(function () {

  var device, previousDevice, addClass, documentElement, find, handleOrientation, hasClass, orientationEvent, removeClass, userAgent;

  // Save the previous value of the device variable.
  previousDevice = window.device;

  device = {};

  // Add device as a global object.
  window.device = device;

  // The <html> element.
  documentElement = window.document.documentElement;

  // The client user agent string.
  // Lowercase, so we can use the more efficient indexOf(), instead of Regex
  userAgent = window.navigator.userAgent.toLowerCase();

  // Main functions
  // --------------

  device.ios = function () {
    return device.iphone() || device.ipod() || device.ipad();
  };

  device.iphone = function () {
    return !device.windows() && find('iphone');
  };

  device.ipod = function () {
    return find('ipod');
  };

  device.ipad = function () {
    return find('ipad');
  };

  device.android = function () {
    return !device.windows() && find('android');
  };

  device.androidPhone = function () {
    return device.android() && find('mobile');
  };

  device.androidTablet = function () {
    return device.android() && !find('mobile');
  };

  device.blackberry = function () {
    return find('blackberry') || find('bb10') || find('rim');
  };

  device.blackberryPhone = function () {
    return device.blackberry() && !find('tablet');
  };

  device.blackberryTablet = function () {
    return device.blackberry() && find('tablet');
  };

  device.windows = function () {
    return find('windows');
  };

  device.windowsPhone = function () {
    return device.windows() && find('phone');
  };

  device.windowsTablet = function () {
    return device.windows() && find('touch') && !device.windowsPhone();
  };

  device.fxos = function () {
    return (find('(mobile;') || find('(tablet;')) && find('; rv:');
  };

  device.fxosPhone = function () {
    return device.fxos() && find('mobile');
  };

  device.fxosTablet = function () {
    return device.fxos() && find('tablet');
  };

  device.meego = function () {
    return find('meego');
  };

  device.cordova = function () {
    return window.cordova && location.protocol === 'file:';
  };

  device.nodeWebkit = function () {
    return _typeof(window.process) === 'object';
  };

  device.mobile = function () {
    return device.androidPhone() || device.iphone() || device.ipod() || device.windowsPhone() || device.blackberryPhone() || device.fxosPhone() || device.meego();
  };

  device.tablet = function () {
    return device.ipad() || device.androidTablet() || device.blackberryTablet() || device.windowsTablet() || device.fxosTablet();
  };

  device.desktop = function () {
    return !device.tablet() && !device.mobile();
  };

  device.television = function () {
    var i, tvString;

    television = ["googletv", "viera", "smarttv", "internet.tv", "netcast", "nettv", "appletv", "boxee", "kylo", "roku", "dlnadoc", "roku", "pov_tv", "hbbtv", "ce-html"];

    i = 0;
    while (i < television.length) {
      if (find(television[i])) {
        return true;
      }
      i++;
    }
    return false;
  };

  device.portrait = function () {
    return window.innerHeight / window.innerWidth > 1;
  };

  device.landscape = function () {
    return window.innerHeight / window.innerWidth < 1;
  };

  // Public Utility Functions
  // ------------------------

  // Run device.js in noConflict mode,
  // returning the device variable to its previous owner.
  device.noConflict = function () {
    window.device = previousDevice;
    return this;
  };

  // Private Utility Functions
  // -------------------------

  // Simple UA string search
  find = function find(needle) {
    return userAgent.indexOf(needle) !== -1;
  };

  // Check if documentElement already has a given class.
  hasClass = function hasClass(className) {
    var regex;
    regex = new RegExp(className, 'i');
    return documentElement.className.match(regex);
  };

  // Add one or more CSS classes to the <html> element.
  addClass = function addClass(className) {
    var currentClassNames = null;
    if (!hasClass(className)) {
      currentClassNames = documentElement.className.replace(/^\s+|\s+$/g, '');
      documentElement.className = currentClassNames + " " + className;
    }
  };

  // Remove single CSS class from the <html> element.
  removeClass = function removeClass(className) {
    if (hasClass(className)) {
      documentElement.className = documentElement.className.replace(" " + className, "");
    }
  };

  // HTML Element Handling
  // ---------------------

  // Insert the appropriate CSS class based on the _user_agent.

  if (device.ios()) {
    if (device.ipad()) {
      addClass("ios ipad tablet");
    } else if (device.iphone()) {
      addClass("ios iphone mobile");
    } else if (device.ipod()) {
      addClass("ios ipod mobile");
    }
  } else if (device.android()) {
    if (device.androidTablet()) {
      addClass("android tablet");
    } else {
      addClass("android mobile");
    }
  } else if (device.blackberry()) {
    if (device.blackberryTablet()) {
      addClass("blackberry tablet");
    } else {
      addClass("blackberry mobile");
    }
  } else if (device.windows()) {
    if (device.windowsTablet()) {
      addClass("windows tablet");
    } else if (device.windowsPhone()) {
      addClass("windows mobile");
    } else {
      addClass("desktop");
    }
  } else if (device.fxos()) {
    if (device.fxosTablet()) {
      addClass("fxos tablet");
    } else {
      addClass("fxos mobile");
    }
  } else if (device.meego()) {
    addClass("meego mobile");
  } else if (device.nodeWebkit()) {
    addClass("node-webkit");
  } else if (device.television()) {
    addClass("television");
  } else if (device.desktop()) {
    addClass("desktop");
  }

  if (device.cordova()) {
    addClass("cordova");
  }

  // Orientation Handling
  // --------------------

  // Handle device orientation changes.
  handleOrientation = function handleOrientation() {
    if (device.landscape()) {
      removeClass("portrait");
      addClass("landscape");
    } else {
      removeClass("landscape");
      addClass("portrait");
    }
    return;
  };

  // Detect whether device supports orientationchange event,
  // otherwise fall back to the resize event.
  if (Object.prototype.hasOwnProperty.call(window, "onorientationchange")) {
    orientationEvent = "orientationchange";
  } else {
    orientationEvent = "resize";
  }

  // Listen for changes in orientation.
  if (window.addEventListener) {
    window.addEventListener(orientationEvent, handleOrientation, false);
  } else if (window.attachEvent) {
    window.attachEvent(orientationEvent, handleOrientation);
  } else {
    window[orientationEvent] = handleOrientation;
  }

  handleOrientation();

  if (typeof define === 'function' && _typeof(define.amd) === 'object' && define.amd) {
    define(function () {
      return device;
    });
  } else if (typeof module !== 'undefined' && module.exports) {
    module.exports = device;
  } else {
    window.device = device;
  }
}).call(undefined);
"use strict";

function checkGeoLocation() {
    if (isGeoLocationOn && navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function (position) {
            var x = position.coords.latitude;
            var y = position.coords.longitude;
            //59.818101, 30.327032 ROI
            //59.854597, 30.320867 Metro
            var x1 = 59.818101; //ROI
            var y1 = 30.327032; //ROI
            var x2 = 59.854597; //Metro
            var y2 = 30.320867; //Metro

            var distanceToRoi = Math.sqrt(Math.pow(Math.abs(x1 - x), 2) + Math.pow(Math.abs(y1 - y), 2));
            var distanceToMetro = Math.sqrt(Math.pow(Math.abs(x2 - x), 2) + Math.pow(Math.abs(y2 - y), 2));

            if (distanceToRoi <= distanceToMetro) {
                currentTableId = 1;
                $("#toMetro").addClass("is-active");
                $("#toTechn").removeClass("is-active");
                $("#timelineDirection").addClass("tube");
                $("#scheduleList0").hide();
                $("#scheduleList1").show();
            } else {
                currentTableId = 0;
                $("#toTechn").addClass("is-active");
                $("#toMetro").removeClass("is-active");
                $("#timelineDirection").removeClass("tube");
                $("#scheduleList1").hide();
                $("#scheduleList0").show();
            }
            if (currentTableId === 0) {
                if ($("#scheduleList0 li.next").length > 0) {
                    $('#timelineDirection').animate({ scrollTop: $("#scheduleList0 li.next").offset().top - $("#scheduleList0").offset().top - 60 });
                }
            } else {
                if ($("#scheduleList1 li.next").length > 0) {
                    $('#timelineDirection').animate({ scrollTop: $("#scheduleList1 li.next").offset().top - $("#scheduleList1").offset().top - 60 });
                }
            }
        });
    } else {
        currentTableId = 0;
        $("#toTechn").addClass("is-active");
        $("#toMetro").removeClass("is-active");
        $("#timelineDirection").removeClass("tube");
        $("#scheduleList1").show();
        $("#scheduleList0").hide();
        $('#timelineDirection').animate({ scrollTop: $("#scheduleList0 li.next").offset().top - $("#scheduleList0").offset().top - 60 });
    }
}
"use strict";

/**
 * Первичная инициализация
 */
$(function () {

    //проверка геопозиции
    checkGeoLocation();

    //showMap();
    //первичное отображение таблицы, в зависимости от заданной стартовой
    if (currentTableId === 0) {
        $("#scheduleList1").hide();
        $("#scheduleList0").show();
    } else {
        $("#scheduleList0").hide();
        $("#scheduleList1").show();
    }

    // let listTo = $("#scheduleList0").get(0).children;
    // let listFrom = $("#scheduleList1").get(0).children;
    //
    // let lastLi = listTo[listTo.length - 1];
    // lastLi.className = "warning";
    //
    // console.log(lastLi);
    // lastLi.children[1].children[1].innerText = "Всегда есть другие варианты";
    //
    // lastLi = listFrom[listFrom.length - 1];
    // lastLi.className = "warning";
    // lastLi.children[1].children[1].innerText = "Всегда есть другие варианты";


    if (currentTableId === 0) {
        if ($("#scheduleList0 li.next").length > 0) {
            $('#timelineDirection').animate({ scrollTop: $("#scheduleList0 li.next").offset().top - $("#scheduleList0").offset().top - 60 });
        }
    } else {
        if ($("#scheduleList1 li.next").length > 0) {
            $('#timelineDirection').animate({ scrollTop: $("#scheduleList1 li.next").offset().top - $("#scheduleList1").offset().top - 60 });
        }
    }
});
'use strict';

$(function () {
   $('.mobile-number55').click(function () {
      if (device.mobile()) {
         // window.open('tel: +78123180055')
      }
   });
});
'use strict';

// /**
//  * Модуль карты
//  * @param {object} function ( Инициализация карты
//  */
// $(function () {
// 	/**
// 	 * Инициализация карты
// 	 */
// 	function init() {
// 		const places = {
// 			metro: [59.853876, 30.321102],
// 			technopolis: [59.818043, 30.327938],
//             metro1: [59.850127, 30.321772],
//             routeCenter: [59.835681, 30.322253]
// 		};
// 		let from = places.metro,
// 			to = places.technopolis;
// 		let myMap = new ymaps.Map('map', {
// 				center: places.metro,
// 				zoom: 16
// 			}, {
// 				searchControlProvider: 'yandex#search'
//
// 			}),
// 			myPlacemark = new ymaps.Placemark(myMap.getCenter());
//
// 		myMap.geoObjects.add(myPlacemark);
//         let myRoute;
//
//         function addRoute(from,to){
//             ymaps.route([
//             {
//                 point: from,
//                 type: 'viaPoint'
//             },
//             to,
//             ]).then(function (route) {
//                         myMap.geoObjects.add(myRoute = route);
//
//         }, function (error) {
//             console.error('Возникла ошибка: ' + error.message);
//             })
//         }
//         let routeButton = new ymaps.control.Button('<i class="fa fa-bus" style="color: dimgray"></i>');
//
//
//         routeButton.events
//             .add('select', function () {
//             addRoute(from,to);
//             myMap.setZoom(12);
//             myMap.setCenter(places.routeCenter);
//         })
//             .add('deselect', function () {
//             myRoute && myMap.geoObjects.remove(myRoute);
//         });
//
//
//         myMap.controls.add(routeButton, {float: 'left', maxWidth: 'auto'});
//
// 		myPlacemark.events
// 			.add('mouseenter', function (e) {
// 				// Ссылку на объект, вызвавший событие,
// 				// можно получить из поля 'target'.
// 				e.get('target').options.set('preset', 'islands#greenIcon');
// 			})
// 			.add('mouseleave', function (e) {
// 				e.get('target').options.unset('preset');
// 			});
//
//        function changeRoute(){
//             if (routeButton.isSelected()) {
//                 myRoute && myMap.geoObjects.remove(myRoute);
//                 addRoute(from,to);
//             }
//         }
//
// 		// $(".from_technopolis").click(function () {
// 		// 	myMap.setCenter(places.technopolis);
//          //    myPlacemark.geometry.setCoordinates(myMap.getCenter());
//          //    from = places.technopolis;
//          //    to= places.metro1;
//          //    changeRoute();
//          //    myMap.setZoom(16);
// 		// });
//         //
// 		// $(".to_technopolis").click(function () {
// 		// 	myMap.setCenter(places.metro);
// 		// 	myPlacemark.geometry.setCoordinates(myMap.getCenter());
//          //    from=places.metro;
//          //    to=places.technopolis;
//          //    changeRoute();
//          //    myMap.setZoom(16);
// 		// });
//
//
// 	}
//
// 	//ymaps.ready(init);
//
// });
var places = {
    metro: [59.854606, 30.320864],
    technopolis: [59.817998, 30.328237]
};

function showMap() {
    if (navigator.onLine) {
        $('#first_scheme').find('#map0').html('<iframe src="https://yandex.ru/map-widget/v1/?um=constructor%3A55e0e63b17daab5b3dcd5b216d61836c4e09fd41632fa603e14699952d0c4999&amp;source=constructor" width="100%" height="300" frameborder="0"></iframe>');
        $('#second_scheme').find('#map1').html('<iframe src="https://yandex.ru/map-widget/v1/?um=constructor%3A012d53561df0d3b05b5008c893055936da12d10e84e16681cf71165ceaa517e7&amp;source=constructor" width="100%" height="300" frameborder="0"></iframe>');
    } else {
        $('#first_scheme').find('#map0').html('<img id="cache-0map" src="assets/images/0map_cache.png" height="300" width="600" alt="Карта">');
        $('#second_scheme').find('#map1').html('<img id="cache-1map" src="assets/images/1map_cache.png" height="300" width="600" alt="Карта">');
    }
}

$(function () {

    $('.map-link-metro').click(function () {
        if (navigator.onLine) {
            window.open('http://maps.apple.com/?q=' + places.metro[0] + ',' + places.metro[1]);
        }
    });

    $('.map-link-tech').click(function () {
        if (navigator.onLine) {
            window.open('http://maps.apple.com/?q=' + places.technopolis[0] + ',' + places.technopolis[1]);
        }
    });
});
'use strict';

/**
 * Управление уведомлением
 */
$(function () {
    /**
     * Скрытие уведомления
     */
    function hideNotification() {
        $('#notification').hide();
    }

    $('#notification').click(function () {
        hideNotification();
    });
});
/**
 * Модуль отрисовка боковой панели 
 */
// $(function(){
// 	(function(){
// 		let strDOM = "";
// 		days.forEach(function (day, i) {
// 			strDOM+= `<div class="panel--button panel--button-${i} day-${day}">
// 						<span name="${day}"></span>
// 					</div>`;
// 		});
// 		$(".panel").append(strDOM);
//
// 		days.forEach(function (day) {
// 			$(`.panel--button.day-${day}`).click(function () {
// 				console.log(day, " clicked");
// 				days.forEach(function (dayin) {
// 					$(`.timetable__min.day-${dayin}`).removeClass("spy");
// 					console.log(dayin, " removeClass")
// 				});
// 				$(`.timetable__min.day-${day}`).addClass("spy");
// 				console.log(day, " addClass");
// 				setTimeout(function(){
// 					days.forEach(function (dayin) {
// 					$(`.timetable__min.day-${dayin}`).removeClass("spy");
// 					console.log(dayin, " removeClass")
// 				});
// 				},3000);
//
// 			});
// 		});
// 	})();
//
// });
"use strict";
'use strict';

/**
 * Модуль установки времени показа заставки
 */
$(function () {
    $('.js-splash').click(function () {
        $('.js-splash').hide();
    });
    // Установка времени показа заставки
    $('.splash').delay(1000).fadeOut("slow");
});
//
// $(".xls").click(function(){
//     location.href = "https://docs.google.com/spreadsheet/pub?key=1Xdje643qsnGXaOjU70larjh-UFTh6Bt9ii83a7t68Oo&output=xls";
// })
//
// $(".pdf").click(function(){
//     location.href = "https://docs.google.com/spreadsheet/pub?key=1Xdje643qsnGXaOjU70larjh-UFTh6Bt9ii83a7t68Oo&output=pdf";
// })
"use strict";
'use strict';

/**
 * Модуль установки событий работы с свичём
 */
// $(function () {
//     $(".russian").button('toggle');
//     $(".russian").click(function () {
//         setLanguage("ru");
//         $('#map').attr('lang','ru');
//     });
//  $(".russian").click();
//     $(".english").click(function () {
//         setLanguage("en");
//         $('#map').attr('lang','en');
//     });
//  $(".lang").addClass("btn-group-vertical");
//  $(".lang").removeClass("btn-group");
//     $(".to_technopolis").button('toggle');
//  $(".to_technopolis").click(function () {
//          $("#route0").css("visibility", "visible");
//          $("#route0").css("position", "initial");
//          $("#route1").css("visibility", "hidden");
//          $("#route1").css("position", "absolute");
//     });
//  $(".from_technopolis").click(function () {
//         $("#route0").css("visibility", "hidden");
//          $("#route0").css("position", "absolute");
//          $("#route1").css("visibility", "visible");
//          $("#route1").css("position", "initial");
//     });
// });

// var windowWidth = document.body.clientWidth;

// function showMap() {
//     //$('#first_scheme').find('#map0').html('<script type="text/javascript" charset="utf-8" async src="https://api-maps.yandex.ru/services/constructor/1.0/js/?um=constructor%3A7757fad0712b0a44ffbabf020dc68752cea4c3c876db47744728c731e6c3051c&amp;width=' + $(window).width() + '&amp;height=400&amp;lang=ru_RU&amp;scroll=true"></script>');
//     //$('#second_scheme').find('#map1').html('<script type="text/javascript" charset="utf-8" async src="https://api-maps.yandex.ru/services/constructor/1.0/js/?um=constructor%3Afcd18ec223d5d71ebccdb36407f7f14715e6a207a5455b0d3bfad2ed86a2f2b1&amp;width=' + $(window).width() + '&amp;height=400&amp;lang=ru_RU&amp;scroll=true"></script>');
//
// }

// $(window).resize(function () {
//     if (currentWindow === 2) {
//         if (document.body.clientWidth != windowWidth) {
//             windowWidth = document.body.clientWidth;
//             // alert("XYU");
//             // console.log("\n\n\n\n\n\n\n\n\n");
//             // console.log(windowWidth);
//             showMap();
//         }
//     }
// });

function checkMapLoad() {
    if (currentWindow === 2 && !isLoadedMaps) {
        showMap();
        isLoadedMaps = true;
    }
}

$(function () {

    $('#First_page').click(function () {
        currentWindow = 1;
        if (currentTableId === 0) {
            $('#toTechn').trigger('click');
        } else if (currentTableId === 1) {
            $('#toMetro').trigger('click');
        }
    });

    $('#Second_page').click(function () {
        currentWindow = 2;
        checkMapLoad();
    });

    $('#Third_page').click(function () {
        currentWindow = 3;
    });

    $("#toTechn").click(function () {
        currentTableId = 0;

        $("#toTechn").addClass("is-active");
        $("#toMetro").removeClass("is-active");
        $("#timelineDirection").removeClass("tube");

        if (currentWindow === 1) {
            transition1();

            $("#scheduleList1").hide();
            $("#scheduleList0").show();

            if ($("#scheduleList0").find("li.next").length > 0) {
                $('#timelineDirection').animate({ scrollTop: $("#scheduleList0 li.next").offset().top - $("#scheduleList0").offset().top - 60 });
            }
        } else if (currentWindow === 2) {
            transition2();
            //showMap();
        } else if (currentWindow === 3) transition3();
    });

    $("#toMetro").click(function () {
        currentTableId = 1;
        $("#toMetro").addClass("is-active");
        $("#toTechn").removeClass("is-active");
        $("#timelineDirection").addClass("tube");

        if (currentWindow === 1) {
            transition1();

            $("#scheduleList1").show();
            $("#scheduleList0").hide();

            if ($("#scheduleList1").find("li.next").length > 0) {
                $('#timelineDirection').animate({ scrollTop: $("#scheduleList1 li.next").offset().top - $("#scheduleList1").offset().top - 60 });
            }
        } else if (currentWindow === 2) {
            transition2();
            //showMap();
        } else if (currentWindow === 3) transition3();
    });
});
'use strict';

function transition1() {
    $('#first_alt_ways').hide();
    $('#second_alt_ways').hide();
    $('#first_scheme').hide();
    $('#second_scheme').hide();
    $('#timelineDirection').show();
    $('#first_alt_ways').hide();
    $('#second_alt_ways').hide();
    $('#First_page').attr('class', 'is-active');
    $('#Second_page').attr('class', '');
    $('#Third_page').attr('class', '');
}

function transition2() {
    $('#notification').hide();
    $('#timelineDirection').hide();
    $('.third_page').hide();
    $('#first_alt_ways').hide();
    $('#second_alt_ways').hide();
    $('#First_page').attr('class', '');
    $('#Second_page').attr('class', 'is-active');
    $('#Third_page').attr('class', '');

    if (currentTableId == 0) {
        $('#first_scheme').show();
        $('#second_scheme').hide();
    } else if (currentTableId == 1) {
        $('#first_scheme').hide();
        $('#second_scheme').show();
    }
}

function transition3() {
    $('#notification').hide();
    $('#timelineDirection').hide();
    $('#first_scheme').hide();
    $('#second_scheme').hide();
    $('#First_page').attr('class', '');
    $('#Second_page').attr('class', '');
    $('#Third_page').attr('class', 'is-active');

    if (currentTableId == 0) {
        $('#first_alt_ways').show();
        $('#second_alt_ways').hide();
    } else if (currentTableId == 1) {
        $('#first_alt_ways').hide();
        $('#second_alt_ways').show();
    }
}
"use strict";
'use strict';

$(function () {

    $('.js-weekend-splash').hide();

    $('.js-close-weekend-splash').click(function () {
        $('.js-weekend-splash').hide();
        $('#First_page').trigger('click');
    });

    $('.js-open-alt-ways').click(function () {
        $('.js-weekend-splash').hide();
        $('#Third_page').trigger('click');
    });
});